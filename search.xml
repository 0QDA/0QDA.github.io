<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML/CSS</title>
      <link href="/2022/08/25/html-css/"/>
      <url>/2022/08/25/html-css/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="属性值描述"><a href="#属性值描述" class="headerlink" title="属性值描述"></a>属性值描述</h4><p>button定义可点击按钮（多数情况下，用于通过JavaScript启动脚本）。</p><p>checkbox定义复选框。</p><p>file定义输入字段和“浏览“按钮，供文件上传。</p><p>hidden定义隐藏的输入字段。</p><p>image定义图像形式的提交按钮。</p><p>password定义密码字段。该字段中的字符被掩码。</p><p>radio定义单选按钮。</p><p>reset定义重置按钮。重置按钮会清除表单中的所有数据。</p><p>submit定义提交按钮。提交按钮会把表单数据发送到服务器。</p><p>text定义单行的输入字段，用户可在其中输入文本。默认宽度为20个字符。</p><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><table><thead><tr><th><strong>基础选择器</strong></th><th><strong>作用</strong></th><th><strong>特点</strong></th><th><strong>使用情况</strong></th><th><strong>用法</strong></th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选择出所有相同标签,比如p</td><td>不能差异化选择</td><td>较多</td><td>P{clolor:red};</td></tr><tr><td>类选择器</td><td>可以选出1个或多个标签</td><td>可以根据需求选择</td><td>非常多</td><td>.nav{color:red;}</td></tr><tr><td>Id选择器</td><td>只能选择1个标签</td><td>ID属性只能在每一个HTML文档里面出现一次</td><td>一般和js搭配</td><td>#nav{color:red;}</td></tr><tr><td>通配符选择器</td><td>选择所有的标签</td><td>选择的太多,有部分不需要选择</td><td>特殊情况使用</td><td>*{color:red;}</td></tr></tbody></table><p>id 选择器和类选择器的区别</p><p>①类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。</p><p>②id选择器好比人的身份证号码，全中国是唯一的，不得重复。</p><p>③id选择器和类选择器最大的不同在于使用次数上。</p><p>④|类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和JavaScript搭配使用。</p><h4 id="Emmet-语法"><a href="#Emmet-语法" class="headerlink" title="Emmet 语法"></a>Emmet 语法</h4><p>1.1快速生成HTML结构语法</p><p>1.生成标签直接输入标签名按tab键即可比如div然后tab键，就可以生成&lt;div&gt;&lt;&#x2F;div&gt;</p><p>2.如果想要生成多个相同标签加上<em>就可以了比如 div</em>3就可以快速生成3个div</p><p>3.如果有父子级关系的标，可以用&gt;比如ul&gt;li就可以了</p><p>4.如果有兄弟关系的标签，用+就可以了比如div+p</p><p>5.如果生成带有类名或者id名字的，直接写demo或者#two tab键就可以了</p><p>6.如果生成的div类名是有顺序的，可以用自增符号$</p><p>7.如果想要在生成的标签内部写内容可以用{}表示</p><table><thead><tr><th><strong>复合选择器</strong></th><th><strong>作用</strong></th><th><strong>特点</strong></th><th><strong>使用情况</strong></th><th><strong>用法</strong></th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是<strong>空格</strong>.nav a</td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只选择亲儿子</td><td>较少</td><td>符号是<strong>大于</strong>.nav&gt;a</td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集体声明</td><td>较多</td><td>符号是**逗号.**nav,.navheader</td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住a{}和a:hover实际开发的写法</td></tr><tr><td>:focus选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td>input:focus记住这个写法</td></tr></tbody></table><h4 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h4><p>常见的块元素有&lt;h1&gt;～&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</p><p>块级元素的特点：</p><p>①比较霸道，自己独占一行。</p><p>②高度，宽度、外边距以及内边距都可以控制。③宽度默认是容器（父级宽度）的100%.</p><p>⑥是一个容器及盒子，里面可以放行内或者块级元素。</p><p>注意：</p><ul><li><p>文字类的元素内不能使用块级元素</p></li><li><p>标签主要用于存放文字，因此<p>里面不能放块级元素，特别是不能放<div></li><li><p>同理，&lt;hl&gt;~&lt;h6&gt;等都是文字类块级标签，里面也不能放其他块级元素</p></li></ul><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt; u &gt;、&lt;span&gt;等，其中&lt;span&gt;标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</p><p>行内元素的特点：</p><ol><li><p>相邻行内元素在一行上，一行可以显示多个。</p></li><li><p>高，宽直接设置是无效的。</p></li><li><p>默认完度就是它本身内容的宽度。</p></li><li><p>行内元素只能容纳文本或其他行内元素。</p></li></ol><p>注意：</p><ul><li><p>锚接里面不能再放链接</p></li><li><p>特殊情况摄接&lt;a&gt;里面可以放块袋元素，但是给&lt;a&gt;转换一下块圾横式量安全</p></li><li><p>转换为块元素：display:blockk</p></li><li><p>转换为行内元素：display.inline；</p></li><li><p>转换为行内块：display:inline-block；</p></li></ul><h4 id="Img"><a href="#Img" class="headerlink" title="Img"></a>Img</h4><p>参数值作用</p><p>repeat背景图像在纵向和横向上平铺（默认的）</p><p>no-repeat背景图像不平铺</p><p>repeat-x背景图像在横向上平铺</p><p>repeat-y背景图像在纵向平铺</p><h4 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h4><p>border-collapse:collapse；</p><ul><li><p>collapse单词是合并的意思</p></li><li><p>border-collapse:collapse；表示相邻边框合并在一起</p></li></ul><h4 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h4><p>为什么需要浮动？</p><p>总结：有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。因为浮动可以改变元素标签默认的排列方式。</p><p>浮动最典型的应用：可以让多个块元素一行排列显示</p><p>网页布局的第一准则：多个块元素纵向排列找标准流，多个块元素横向排列找浮动</p><h4 id="CSS属性书写顺序（重点）建议遵循以下顺序："><a href="#CSS属性书写顺序（重点）建议遵循以下顺序：" class="headerlink" title="CSS属性书写顺序（重点）建议遵循以下顺序："></a>CSS属性书写顺序（重点）建议遵循以下顺序：</h4><ol><li><p>布局定位属性：display&#x2F;position&#x2F;float&#x2F;clear&#x2F;visibility&#x2F;overflow（建议display第一个写，毕竟关系到模式）</p></li><li><p>自身属性：width&#x2F;height&#x2F;margin&#x2F;padding&#x2F;border&#x2F;background</p></li><li><p>文本属性：color&#x2F;font&#x2F;text-decoration&#x2F;text-align&#x2F;vertical-align&#x2F;white-space&#x2F;break-word</p></li><li><p>其他属性（CSS3）：content&#x2F;cursor&#x2F;border-radius&#x2F;box-shadow&#x2F;text-shadow&#x2F;background:linear-gradient..…</p></li></ol><h4 id="导航栏注意点："><a href="#导航栏注意点：" class="headerlink" title="导航栏注意点："></a>导航栏注意点：</h4><p>实际开发中，我们不会直接用链接a而是用li包含链接（i+a）的做法。</p><ol><li><p>li+a语义更清晰，一看这就是有条理的列表型内容。</p></li><li><p>如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</p></li></ol><p>注意</p><ol><li><p>让导航栏一行显示给li加浮动，因为i是块级元素，需要一行显示</p></li><li><p>这个nav导航栏可以不给宽度，将来可以继续添加其余文字</p></li><li><p>困为导航栏里面文字不一样多所以最好给链接a左右padding撑开盒子，而不是指定宽度</p></li></ol><h4 id="绝对定位的盒子居中"><a href="#绝对定位的盒子居中" class="headerlink" title="绝对定位的盒子居中"></a>绝对定位的盒子居中</h4><p>加了绝对定位的盒子不能通过margin：0auto水平居中，但是可以通过以下计算方法实现水平和垂直居中。</p><p>①  left：50%；：让盒子的左侧移动到父级元素的水平中心位置。</p><p>②  marqin-left:-100dk：让盒子向左移动自身宽度的一半。</p><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><p>display属性用于设置一个元素应如何显示。</p><ul><li><p>display.none；隐藏对象</p></li><li><p>display:block；除了转换为块级元素之外，同时还有显示元素的意思</p></li></ul><p>display隐藏元素后，不再占有原来的位置。</p><p>后面应用及其广泛，搭配JS可以做很多的网页特效。</p><h4 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h4><p>visibility 属性用于指定一个元素应可见还是隐藏。</p><ul><li><p>visibility:visible；visible；元素可视</p></li><li><p>visibility:hidden；hidden；元素隐藏</p></li></ul><p>visibility隐藏元素后，继续占有原来的位置。</p><p>如果隐藏元素想要原来位置，就用visibility:hidden</p><p>如果隐藏元素不想要原来位置，就用display:none（用处更多重点）</p><h4 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h4><p>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度）时，会发生什么。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>不剪切内容也不添加滚动条</td></tr><tr><td>hidden</td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉scroll不管超出内容否，总是显示滚动条</td></tr><tr><td>auto</td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><p>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。</p><p>但是如果有定位的盒子，请慎用overflowhidden因为它会隐藏多余的部分。</p><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a><strong>定位</strong></h4><table><thead><tr><th>定位模式</th><th>是否脱标</th><th>移动位置</th><th>是否常用</th></tr></thead><tbody><tr><td>Static静态定位</td><td>否</td><td>不能使用变偏移</td><td>很少</td></tr><tr><td>relative相对定位</td><td>否(占有位置)</td><td>相对自身位置移动</td><td>常用</td></tr><tr><td>absolute绝对定位</td><td>是(不占有位置)</td><td>带有定位的父级</td><td>常用</td></tr><tr><td>fixed固定定位</td><td>是(不占有位置)</td><td>浏览器可视区</td><td>常用</td></tr><tr><td>sticky粘性定位</td><td>否(占有位置)</td><td>浏览器可视区</td><td>当前阶段较少</td></tr></tbody></table><h4 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h4><p>为什么需要精灵图</p><p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。</p><p>因此，为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p><h4 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a><strong>对齐方式</strong></h4><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。</p><p>主要解决方法有两种：</p><ol><li><p>给图片添加vertical-align:middlel|top|bottom等。（提倡使用的）</p></li><li><p>把图片转换为块级元素 display:block；</p></li></ol><h4 id="溢出显示省略号"><a href="#溢出显示省略号" class="headerlink" title="溢出显示省略号"></a><strong>溢出显示省略号</strong></h4><p>单行文本溢出显示省略号–必须满足三个条件</p><ol><li>先强制一行内显示文本</li></ol><pre class=" language-css"><code class="language-css"><span class="token property">white-space</span><span class="token punctuation">:</span>nowrap；（默认norma<span class="token number">1</span>自动换行）</code></pre><ol start="2"><li>超出的部分隐藏</li></ol><pre class=" language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span>hidden；</code></pre><ol start="3"><li>文字用省略号替代超出的部分</li></ol><pre class=" language-css"><code class="language-css"><span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis；</code></pre><p>多行文本溢出显示省略号，有较大兼容性问题，适合于webKit浏览器或移动端（移动端大部分是webkit内核）</p><pre class=" language-css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span>hidden；<span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis；</code></pre><p>弹性伸缩盒子模型显示</p><p>display:-webkit-box；&#x2F;<em>限制在一个块元素显示的文本的行数</em>&#x2F;</p><p>-webkit-line-clamp：2；</p><p>设置或检索伸缩盒对象的子元素的排列方式</p><p>-webkit-box-orient:vertical；</p><h4 id="视频-lt-video-gt-–常见属性"><a href="#视频-lt-video-gt-–常见属性" class="headerlink" title="视频&lt;video&gt;–常见属性"></a>视频&lt;video&gt;–常见属性</h4><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>视频就绪自动播放（谷歌浏览器需要添加muted来解决自动播放问题）</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td>width</td><td>pixels(像素)</td><td>设置播放器宽度</td></tr><tr><td>hight</td><td>pixels(像素)</td><td>设置播放器高度</td></tr><tr><td>loop</td><td>loop</td><td>播放完是否继续播放该视频，循环播放</td></tr><tr><td>preload</td><td>auto(预先加载视频)  none(不预加载视屏)</td><td>规定是否预加载视频（如果有了autoplay 就忽略该属性）</td></tr><tr><td>src</td><td>url</td><td>视频url地址</td></tr><tr><td>poster</td><td>Imgurl</td><td>加载等待的画面图片</td></tr><tr><td>Muted</td><td>muted</td><td>静音播放</td></tr></tbody></table><p>&lt;input&gt;</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>type&#x3D;”email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type&#x3D;”url”</td><td>限制用户输入必须URL类型</td></tr><tr><td>type&#x3D;”date”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type&#x3D;”time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type&#x3D;”month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type&#x3D;”week”</td><td>限制用户输入必须为周类型</td></tr><tr><td>type&#x3D;”number”</td><td>限制用户输入必须为数字类型</td></tr><tr><td>type&#x3D;”tel”</td><td>手机号码</td></tr><tr><td>type&#x3D;”search”</td><td>搜索框</td></tr><tr><td>type&#x3D;”color”</td><td>生成一个颜色选择表单</td></tr></tbody></table><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td><strong>placeholder</strong></td><td>提示文本</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td>autocomplete</td><td>Off&#x2F;on</td><td>当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。  默认已经打开，如autocomplete&#x3D;”on”，关闭  autocomplete &#x3D;”off”  需要放在表单内，同时加上name 属性，同时成功提交</td></tr><tr><td><strong>multiple</strong></td><td>multiple</td><td>可以多选文件提交</td></tr></tbody></table><h4 id="元素选择"><a href="#元素选择" class="headerlink" title="元素选择"></a>元素选择</h4><p>nth-child（n）选择某个父元素的一个或多个特定的子元素</p><ul><li><p>n可以是数字，关键字和公式</p></li><li><p>n如果是数字，就是选择第n个子元素，里面数字从1开始…</p></li><li><p>n可以是关键字：even偶数，odd奇数</p></li><li><p>n可以是公式：常见的公式如下（如果n是公式，则从0开始计算，但是第0个元素或者超出了元素的个数会被忽略）</p></li></ul><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a><strong>伪元素选择器</strong></h4><p>伪元素选择器可以帮助我们利用CSS创建新标签元素,而不需要HTML标签,从而简化HTML结构</p><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>::before</td><td>在元素的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table><p>注意:</p><ul><li><p>before和after创建一个元素,但属于行内元素</p></li><li><p>新创建的这个元素在文档中是找不到的,所以我们称为伪元素</p></li><li><p>语法:element::before{}</p></li><li><p>before和after必须有content属性</p></li><li><p>伪元素选择器和标签选择器一样,权重为1</p></li></ul><p>CSS3中可以通过box-sizing来指定盒模型，有2个值：即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。</p><p>可以分成两种情况：</p><ol><li><p>box-sizing:content-box 盒子大小为width+adding+border（以前默认的）</p></li><li><p>box-sizing:border-box 盒子大小为width</p></li></ol><p>如果盒子模型我们改为了box-sizing：border-box，那padding和border就不会撑大盒子了（前提padding和border不会超过width宽度）</p><h4 id="新增常用的标签"><a href="#新增常用的标签" class="headerlink" title="新增常用的标签"></a>新增常用的标签</h4><p>&lt;header&gt;：头部标签  &lt;nav&gt;：导航标签  &lt;article&gt;：内容标签  &lt;section&gt;：定义文档某个区域  &lt;aside&gt;：侧边栏标签  &lt;footer&gt;：尾部标签</p><p>清除浮动  . clearfix: before,. clearfix: after {  content:””; display: table;  . clearfix: after {  clear: both;}</p><h4 id="classList属性"><a href="#classList属性" class="headerlink" title="classList属性"></a>classList属性</h4><p>classList属性是HTML5新增的一个属性，返回元素的类名，该属性用于在元素中添加移除以及切换css类</p><h5 id="添加类"><a href="#添加类" class="headerlink" title="添加类"></a>添加类</h5><p>element.classList.add(‘类名’)；</p><blockquote><p>focus.classList.add(‘qqdl’);</p></blockquote><h5 id="移除类"><a href="#移除类" class="headerlink" title="移除类"></a>移除类</h5><blockquote><p>element.classList.remove(‘qqdl’)</p></blockquote><h4 id="Logo制作"><a href="#Logo制作" class="headerlink" title="Logo制作"></a>Logo制作</h4><p>1.logo里面首先放一个h1标签，目的是为了提权，告诉搜索引擎，这个地方很重要。</p><p>2.h1里面再放一个链接，可以返回首页的，把logo的背景图片给链接即可。</p><p>3.为了搜索引擎收录我们，我们链接里面要放文字（网站名称），但是文字不要显示出来。</p><ul><li><p>方法1：text-indent移到盒子外面（text-indent-9999px），然后overflow.hidden，淘宝的做法。</p></li><li><p>方法2：直接给font-size：0；就看不到文字了，京东的做法。</p></li></ul><table><thead><tr><th>约定的命名模块</th><th></th></tr></thead><tbody><tr><td>名称</td><td>说明</td></tr><tr><td>快捷导航栏</td><td>shortcut</td></tr><tr><td>头部</td><td>header</td></tr><tr><td>标志</td><td>logo</td></tr><tr><td>购物车</td><td>shopcar</td></tr><tr><td>搜索</td><td>search</td></tr><tr><td>热点词</td><td>hotwrods</td></tr><tr><td>导航</td><td>nav</td></tr><tr><td>导航左侧</td><td>dropdown包含.dd.dt</td></tr><tr><td>导航右侧</td><td>navitems</td></tr><tr><td>页面底部</td><td>footer</td></tr><tr><td>页面底部服务模块</td><td>mod_service</td></tr><tr><td>页面底部帮助模块</td><td>mod_help</td></tr><tr><td>页面底部版权模块</td><td>mod_copyright</td></tr></tbody></table><p>4.最后给链接一个title属性，这样鼠标放到logo上就可以看到提示文字了。</p><h4 id="2D转换之移动-translate"><a href="#2D转换之移动-translate" class="headerlink" title="2D转换之移动 translate"></a>2D转换之移动 <strong>translate</strong></h4><p>2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，类似定位。</p><p>语法</p><p>transform:translate（x，y）；或者分开写transform:translatex（n）；</p><p>transform:translateY（n）；</p><p>重点</p><ul><li><p>定义2D转换中的移动，沿着X和Y轴移动元素</p></li><li><p>translate最大的优点：不会影响到其他元素的位置</p></li><li><p>translate中的百分比单位是相对于自身元素的translate:（50%，50%）；</p></li><li><p>对行内标签没有效果</p></li></ul><h4 id="2D转换之缩放scale"><a href="#2D转换之缩放scale" class="headerlink" title="2D转换之缩放scale"></a>2D转换之缩放scale</h4><p>顾名思义，可以放大和缩小。只要给元素添加上了这个属性就能控制它放大还是缩小。</p><p>语法: transform:scale（x，y）；</p><p>注意</p><ul><li><p>注意其中的x和y用逗号分隔</p></li><li><p>transform:scale（1，1）：宽和高都放大一倍，相对于没有大</p></li><li><p>transform:scale（2，2）：宽和高都放大了2倍</p></li><li><p>transform:scale（2）：只写一个参数，第二个参数则和第一个参数一样，相当于scale（2，2）</p></li><li><p>transform:scale（0.5，0.5）：缩小</p></li><li><p>sacle缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</p></li></ul><h4 id="转换transform-我们简单理解就是变形有2D和3D之分"><a href="#转换transform-我们简单理解就是变形有2D和3D之分" class="headerlink" title="转换transform 我们简单理解就是变形有2D和3D之分"></a>转换transform 我们简单理解就是变形有2D和3D之分</h4><ul><li><p>2D移动translate（x，y）最大的优势是不影响其他盒子，里面参数用%，是相对于自身宽度和高度来计算的</p></li><li><p>可以分开写比如translateX（x）和translateY（y）</p></li><li><p>2D旋转rotate（度数）可以实现旋转元素度数的单位是deg</p></li><li><p>2D缩放sacle(xy)里面参数是数字不跟单位可以是小数优势在于不影响其他盒子</p></li><li><p>设置转换中心点transform-origin:xy；参数可以百分比、像素或者是方位名词</p></li><li><p>当我们进行综合写法，同时有位移和其他属性的时候，记得要将位移放到最前</p></li></ul><h4 id="动画序列"><a href="#动画序列" class="headerlink" title="动画序列"></a>动画序列</h4><ul><li><p>0%是动画的开始，100%是动画的完成。这样的规则就是动画序列。</p></li><li><p>在@keyframes中规定某项CSS样式，就能创建由当前样式逐渐改为新样式的动画效果。</p></li><li><p>动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</p></li><li><p>请用百分比来规定变化发生的时间，或用关键词”from”和“to”，等同于0%和100%。</p></li></ul><table><thead><tr><th>动画的属性值</th><th></th></tr></thead><tbody><tr><td>属性</td><td>描述</td></tr><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了animation-play-state属性。</td></tr><tr><td>animation-name</td><td>规定@keyframes动画的名称。（必须的）</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒，默认是0。（必须的）</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线，默认是“ease”。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始，默认是0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数，默认是1，还有infinite</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向播放，默认是“normal“，alternate逆播放</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是“running”，还有“pause”。</td></tr><tr><td>animation-fill-mode</td><td>规定动画结束后状态，保持forwards回到起始backwards</td></tr></tbody></table><p>animation：动画名称持续时间运动曲线何时开始播放次数是否反方向动画起始或者结束的状态；animation: myfirst 5s linear 2s infinite alternate；</p><ul><li><p>简写属性里面不包含animation-play-state</p></li><li><p>暂停动画：animation-play-state:puased；经常和鼠标经过等其他配合使用</p></li><li><p>想要动画走回来，而不是直接跳回来：animation-direction:alternate</p></li><li><p>盒子动画结束后，停在结束位置：animation-fill-mode:forwards</p></li></ul><h4 id="透视-perspective"><a href="#透视-perspective" class="headerlink" title="透视 perspective:"></a>透视 perspective:</h4><p>在2D平面产生近大远小视觉立体，但是只是效果二维的</p><ul><li><p>如果想要在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）。</p></li><li><p>模拟人类的视觉位置，可认为安排一只眼睛去看</p></li><li><p>透视我们也称为视距：视距就是人的眼睛到屏幕的距离·距离视觉点越近的在电脑平面成像越大，越远成像越小</p></li><li><p>透视的单位是像素</p></li></ul><p>透视写在被观察元素的父盒子上面的</p><p>d：就是视距，视距就是一个距离人的眼睛到屏幕的距离。</p><p>z：就是z轴，物体距离屏幕的距离，z轴越大（正值）我们看到的物体就越大。</p><h4 id="3D呈现transfrom-style"><a href="#3D呈现transfrom-style" class="headerlink" title="3D呈现transfrom-style"></a>3D呈现transfrom-style</h4><ul><li><p>控制子元素是否开启三维立体环境。。</p></li><li><p>transform-style:flat子元素不开启3d立体空间默认的</p></li><li><p>transform-style:preserve-3d；子元素开启立体空间</p></li><li><p>代码写给父级，但是影响的是子盒子</p></li><li><p>这个属性很重要，后面必用</p></li></ul><h4 id="1-私有前缀"><a href="#1-私有前缀" class="headerlink" title="1.私有前缀"></a>1.私有前缀</h4><ul><li><p>-moz-：代表firefox 浏览器私有属性</p></li><li><p>-ms-：代表ie 浏览器私有属性</p></li><li><p>-webkit-：代表safari、chrome私有属性</p></li><li><p>-o-：代表Opera私有属性</p></li></ul><p>2.提倡的写法</p><p>-moz-border-radius：10px；</p><p>-webkit-border-radius：10px；</p><p>-o-border-radius：10px；border-radius：10px；</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--：页面主体内容。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hn</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--：h1~h6，分级标题，&lt;h1> 与 &lt;title> 协调有利于搜索引擎优化。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--：无序列表。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--：有序列表。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--：页眉通常包括网站标志、主导航、全站链接以及搜索框。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--：标记导航，仅对文档中重要的链接群使用。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--：页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--：定义外部的内容，其中的内容独立于文档的其余部分。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--：页脚，只有当父级是body时，才是整个页面的页脚。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--：和 em 标签一样，用于强调文本，但它强调的程度更强一些。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--：将其中的文本表示为强调的内容，表现为斜体。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mark</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--：使用黄色突出显示部分文本。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cite</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquoto</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--：定义块引用，块引用拥有它们自己的空间。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--：短的引述（跨浏览器问题，尽量避免使用）。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>time</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>abbr</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--：简称或缩写。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dfn</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--：移除的内容。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--：添加的内容。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--：标记代码。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meter</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>progress</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--：定义运行中的进度（进程）。--></span></code></pre><h4 id="CSS3一些基本样式"><a href="#CSS3一些基本样式" class="headerlink" title="CSS3一些基本样式"></a>CSS3一些基本样式</h4><p>CSS3盒子模型</p><pre class=" language-css"><code class="language-css"><span class="token property">box-sizing</span><span class="token punctuation">:</span>border-box；<span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span>border-box；</code></pre><p>点击高亮我们需要清除清除设置为transparent 完成透明</p><pre class=" language-css"><code class="language-css"><span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span>transparent；</code></pre><p>在移动端浏览器默认的外观在ios上加上这个属性才能给按钮和输入框自定义样式</p><pre class=" language-css"><code class="language-css"><span class="token property">-webkit-appearance</span><span class="token punctuation">:</span>none；</code></pre><p>禁用长按页面时的弹出菜单</p><pre class=" language-css"><code class="language-css"><span class="token selector">img，a</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span>none；<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h4><p>原理：</p><p>就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式</p><h5 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h5><p>属性是flex-direction和flex-wrap属性的复合属性  flex-flow:row wrap；</p><p>flex-direction：设置主轴的方向  ·</p><p>justify-content：设置主轴上的子元排列方式  </p><ul><li><p>flex-wrap：设置子元素是否换行  </p></li><li><p>align-content：设置侧轴上的子元素的排列方式（多行） </p></li><li><p>align-items：设置侧轴上的子元素排列方式（单行）  </p></li><li><p>flex-flow：复合属性，相当于同时设置了flex-direction和flex-wrap</p></li></ul><h5 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h5><p> 控制子项自己在侧轴上的排列方式align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。    &#x2F;*设置自己在侧轴上的排列方式 </p><pre class=" language-css"><code class="language-css"><span class="token property">align-self</span><span class="token punctuation">:</span>flex-end；</code></pre><h5 id="flex-属性★"><a href="#flex-属性★" class="headerlink" title="flex 属性★"></a>flex 属性★</h5><p>flex 属性定义子项目分配剩余空间，用flex来表示占多少份数。  .item{  flex：<number>；&#x2F;<em>default 0</em>&#x2F;  }     order 属性定义项目的排列顺序数值越小，排列越靠前，默认为0。注意：和z-index不一样。</p><h4 id="背景线性渐变Gradie-t-Background"><a href="#背景线性渐变Gradie-t-Background" class="headerlink" title="背景线性渐变Gradie t Background"></a>背景线性渐变Gradie t Background</h4><p> 语法1：  background：1inear-gradient（起始方向，颜色1，颜色2，.…）； </p><p>background:-webkit-linear-gradient（left，red，blue）；  </p><p>background:-webkit-linear-gradient（left top，red，blue）；  </p><p>背景渐变必须添加浏览器私有前缀  起始方向可以是：方位名词或者度数，如果省略默认就是top</p><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><p>语法规范  1.mediatype查询类型  将不同的终端设备划分成不同的类型，称为媒体类型值解释说明 </p><p>all用于所有设备         print 用于打印机和打印预览      scree用于电脑屏幕，平板电脑，智能手机等</p><h4 id="Less-变量"><a href="#Less-变量" class="headerlink" title="Less 变量"></a>Less 变量</h4><p>变量是指没有固定的值，可以改变的。因为我们CSS中的一些颜色和数值等经常使用。</p><p>@变量名：值；</p><ol><li>变量命名规范</li></ol><ul><li><p>必须有@为前缀·不能以数字开头</p></li><li><p>不能包含特殊字符·大小写敏感</p></li></ul><h5 id="Less-运算★"><a href="#Less-运算★" class="headerlink" title="Less 运算★"></a>Less 运算★</h5><p>注意：</p><ul><li><p>乘号（*）和除号（&#x2F;）的写法</p></li><li><p>运算符中间左右有个空格隔开1px+5</p></li><li><p>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位</p></li><li><p>如果两个值之间只有一个值有单位，则运算结果就取该单位</p></li></ul><h4 id="swiper插件使用"><a href="#swiper插件使用" class="headerlink" title="swiper插件使用"></a>swiper插件使用</h4><p>官网地址：https:&#x2F;<a href="http://www.swiper.com.cn/">www.swiper.com.cn/</a></p><ul><li><p>下载需要的css和js文件</p></li><li><p>官网找到类似案例，复制html结构，css样式js语法</p></li><li><p>根据需求定制修改模块</p></li></ul><h4 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h4><p>布局容器<br> Bootstrap 需要为页面内容和粉格系统包裹一个container 容器，Bootstarp预先定义好了这个类，叫container它提供了两个作此用处的类。</p><h4 id="Vw-x2F-vh"><a href="#Vw-x2F-vh" class="headerlink" title="Vw&#x2F;vh"></a>Vw&#x2F;vh</h4><p>vw&#x2F;vh是一个相对单位（类似em和rem相对单位）  </p><p>相对视口的尺寸计算结果</p><p>vw是：viewport width视口宽度单位  </p><p>vh是：viewport height 视口高度单位  </p><p>1W&#x3D;1&#x2F;100视口宽度  1vh&#x3D;1&#x2F;100视口高度</p><h5 id="1vw和vh是什么？"><a href="#1vw和vh是什么？" class="headerlink" title="1vw和vh是什么？"></a>1vw和vh是什么？</h5><p>是相对单位总是相对于视口来说的  </p><p>1vw就是当前视口的1&#x2F;100  2.vw和百分比的区别是什么？  </p><p>百分比%相对于父元素来说的  vw&#x2F;vh相对于当前视口来说的</p><h5 id="1-开发中使用vW，需要像素大厨有哪些改动？"><a href="#1-开发中使用vW，需要像素大厨有哪些改动？" class="headerlink" title="1.开发中使用vW，需要像素大厨有哪些改动？"></a>1.开发中使用vW，需要像素大厨有哪些改动？</h5><p>把模式改为2x模式  </p><h5 id="2-开发中使用vw，如何还原设计稿？"><a href="#2-开发中使用vw，如何还原设计稿？" class="headerlink" title="2.开发中使用vw，如何还原设计稿？"></a>2.开发中使用vw，如何还原设计稿？</h5><p>确定设计稿视口宽度。比如375k  </p><p>直接使用测量数值&#x2F;（视口宽度&#x2F;100）  比如：50&#x2F;（375&#x2F;100）</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2022/08/14/typescript/"/>
      <url>/2022/08/14/typescript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="TS变量声明"><a href="#TS变量声明" class="headerlink" title="TS变量声明"></a>TS变量声明</h3><ul><li><p>类型声明</p><ul><li><p>类型声明是TS非常重要的一个特点</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型<span class="token punctuation">;</span><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">number</span>a <span class="token operator">=</span> <span class="token number">10</span></code></pre></li></ul></li><li><p>自动类型判断</p><ul><li>TS拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token keyword">let</span> b<span class="token operator">=</span><span class="token string">"qqdl"</span></code></pre></li></ul><h4 id="声明示例"><a href="#声明示例" class="headerlink" title="声明示例"></a>声明示例</h4><ol><li><p>声明一个变量a指定类型为number&#x2F;string&#x2F;boolean</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token keyword">let</span> b<span class="token operator">=</span><span class="token number">10</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token keyword">string</span>b <span class="token operator">=</span> <span class="token string">'qqdl'</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span>c <span class="token operator">=</span> <span class="token keyword">true</span></code></pre></li><li><p>声明方法，指定传入参数类型以及返回类型</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>可以使用 | 来连接多个类型（联合类型）</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> d<span class="token punctuation">:</span> <span class="token string">'male'</span> <span class="token operator">|</span> <span class="token string">'female'</span>d <span class="token operator">=</span> <span class="token string">'male'</span></code></pre></li><li><p>字面量</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> e<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">|</span> <span class="token keyword">string</span>e <span class="token operator">=</span> <span class="token keyword">true</span>e <span class="token operator">=</span> <span class="token string">'qqdl'</span><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token operator">|</span> <span class="token string">'blue'</span> <span class="token operator">|</span> <span class="token string">'black'</span> </code></pre></li><li><p>any 表示任意类型相当于关闭了ts的类型检测 在使用TS时不推荐使用any ，TS声明变量不声明变量类型，自动判断类型为any（隐式转换）</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> f<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token keyword">let</span> gf <span class="token operator">=</span> <span class="token number">10</span>f <span class="token operator">=</span> <span class="token string">'qqdl'</span>f <span class="token operator">=</span> <span class="token keyword">true</span><span class="token comment" spellcheck="true">// 类型是any,显式它可以赋值给任意变量，隐式会报错</span><span class="token comment" spellcheck="true">// b = f</span></code></pre></li><li><p>表示未知类型值</p></li></ol><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> h<span class="token punctuation">:</span> unknownh <span class="token operator">=</span> <span class="token number">10</span>h <span class="token operator">=</span> <span class="token string">'qqdl'</span>h <span class="token operator">=</span> <span class="token keyword">true</span><span class="token comment" spellcheck="true">// unknown实际上就是一个类型安全变量不能直接赋值给其他变量</span><span class="token comment" spellcheck="true">// c=h</span><span class="token comment" spellcheck="true">// if (typeof b === 'string') {;</span><span class="token comment" spellcheck="true">//  b = h</span><span class="token comment" spellcheck="true">// };</span></code></pre><ol start="7"><li><p>类型断言，高数变量解析器实际类型</p><pre class=" language-ts"><code class="language-ts">b <span class="token operator">=</span> h as <span class="token keyword">string</span>b <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>h</code></pre></li><li><p>void表示空，以函数为例子，就表示没有返回值的函数</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>never表示永远不会返回结果</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'报错了！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>声明对象类型：{}用来指定对象中可以包含那些属性，语法：{属性名：属性值，属性名：属性值}  在后面加上？表示属性是可选的</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// let i:object; function(){;}; ;{;};都是对象</span><span class="token keyword">let</span> i<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'秋去冬来'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [propName:string]:any表示任意类型属性</span><span class="token keyword">let</span> j<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>propName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> unknown <span class="token punctuation">}</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'qqdl'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'男'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>设置函数类型声明 语法(形参：类型，形参：类型，…)&#x3D;&gt;返回值类型</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> k<span class="token punctuation">:</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span>k <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>数组声明的方式：类型[] Array&lt;类型&gt;</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 表示字符串数组</span><span class="token keyword">let</span> l<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 数值数组</span><span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> m<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">// 元组是固定长度的数组 语法[类型，类型，...]</span><span class="token keyword">let</span> o<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">]</span>o <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'秋去冬来'</span><span class="token punctuation">,</span> <span class="token string">'最帅'</span><span class="token punctuation">]</span></code></pre></li><li><p>enum 枚举</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">enum</span> Gender <span class="token punctuation">{</span><span class="token punctuation">;</span> Male <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Female <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> p<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> gender<span class="token punctuation">:</span> Gender <span class="token punctuation">}</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'秋去冬来'</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>gender <span class="token operator">===</span> Gender<span class="token punctuation">.</span>Male<span class="token punctuation">)</span></code></pre></li><li><p>类型别名 简化类型的使用</p></li></ol><pre class=" language-ts"><code class="language-ts">type myType <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token keyword">let</span> r<span class="token punctuation">:</span> myType<span class="token keyword">let</span> s<span class="token punctuation">:</span> myType</code></pre><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h4><p>定义类</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> 类名 <span class="token punctuation">{</span><span class="token punctuation">;</span>    属性名<span class="token punctuation">:</span> 类型<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>参数<span class="token punctuation">:</span> 类型<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 参数<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">方法名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>示例</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数中this就是当前创建的对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// this 表示的当前方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你在狗叫什么'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>使用</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'白'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">const</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'黑'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>dog1<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">)</span></code></pre><h3 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Amimal</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你在叫什么'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 继承</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Amimal</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你在狗叫什么'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Amimal</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  master<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> master<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//调用父类的构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>master <span class="token operator">=</span> master  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>master<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;主人加油哦`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你他喵有病是吧'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'黑'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'白'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'秋去冬来'</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p><ul><li><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置(public)</p></li><li><p>只读属性（readonly）：</p><ul><li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li></ul></li><li><p>TS中属性具有三种修饰符：</p><ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected ，可以在类、子类中修改</li><li>private ，可以在类中修改</li></ul></li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// public默认，表示任意位置可以访问(修改)</span>  <span class="token comment" spellcheck="true">// private私有属性只能在类中进行修改</span>  <span class="token comment" spellcheck="true">// protected受保护属性，只能在当前类和子类中访问和修改</span>  <span class="token keyword">private</span> _name<span class="token punctuation">:</span> <span class="token keyword">string</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//默认设置get set方法</span>  <span class="token comment" spellcheck="true">// getName() {;</span>  <span class="token comment" spellcheck="true">//   return this.name</span>  <span class="token comment" spellcheck="true">// };</span>  <span class="token comment" spellcheck="true">// setName(value: string) {;</span>  <span class="token comment" spellcheck="true">//   this.name = value</span>  <span class="token comment" spellcheck="true">// };</span>  <span class="token comment" spellcheck="true">// ts设置设置Getter setter方法</span>  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Amianl</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'秋去冬来'</span><span class="token punctuation">)</span></code></pre><h3 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h3><p>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 描述一个对象的类型</span>type myType <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> String  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 接口用来定义一个类结构 用来定义一个类应该包含那些属性和方法，可以当成类型声明去使用</span><span class="token comment" spellcheck="true">// 接口中的所有属性都不能有实际值 只定义对象结构，不考虑实际值</span><span class="token keyword">interface</span> <span class="token class-name">myInterface</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> String  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以重复的名字</span><span class="token keyword">interface</span> <span class="token class-name">myInterface</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实现接口</span><span class="token keyword">class</span> <span class="token class-name">MyCalass</span> <span class="token keyword">implements</span> <span class="token class-name">myInterface</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'向前所未见的明天疾驰'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="泛型-Generic"><a href="#泛型-Generic" class="headerlink" title="泛型(Generic)"></a>泛型(Generic)</h3><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 定义函数或者类时，遇到类型不明确时可以使用泛型</span><span class="token comment" spellcheck="true">// 可以直接调具有泛型的函数</span><span class="token keyword">function</span> fn<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 泛型可以同时指定多个</span><span class="token keyword">function</span> fn2<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K<span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> T<span class="token punctuation">,</span> b<span class="token punctuation">:</span> K<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token keyword">return</span> a<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不指定泛型，TS可以自动推断</span><span class="token keyword">let</span> res2 <span class="token operator">=</span> fn<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'秋去冬来'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//指定泛型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> res2<span class="token punctuation">)</span>fn2<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'qqdl'</span><span class="token punctuation">)</span><span class="token keyword">interface</span> <span class="token class-name">Inter</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 表示泛型T必须是Interd 实现类(子类)</span><span class="token keyword">function</span> fn3<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Inter</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">fn3</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyCalss</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCalss</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'秋去冬来'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue双向数据绑定</title>
      <link href="/2022/06/07/shuang-xiang-shu-ju-bang-ding/"/>
      <url>/2022/06/07/shuang-xiang-shu-ju-bang-ding/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>视频链接：<a href="https://www.bilibili.com/video/BV1Dr4y1c7xS?p=21&amp;share_source=copy_web">https://www.bilibili.com/video/BV1Dr4y1c7xS?p=21&amp;share_source=copy_web</a></p><h3 id="reduce进行累加"><a href="#reduce进行累加" class="headerlink" title="reduce进行累加"></a>reduce进行累加</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 普通程序员的实现逻辑</span><span class="token comment" spellcheck="true">// let total = 0</span><span class="token comment" spellcheck="true">// arr.forEach((item) => {;</span><span class="token comment" spellcheck="true">//   total += item</span><span class="token comment" spellcheck="true">// };)</span><span class="token comment" spellcheck="true">// console.log(total)</span><span class="token comment" spellcheck="true">// 数组的 reduce 方法，会循环当前的数组，侧重于进行“滚雪球”操作</span><span class="token comment" spellcheck="true">// 数组.reduce(函数, 初始值)</span><span class="token comment" spellcheck="true">// 数组.reduce((上次计算的结果, 当前循环的Item项) => {; };, 0)</span><span class="token comment" spellcheck="true">// const 累加的结果 = 数组.reduce((上次计算的结果, 当前循环的Item项) => {; return 上次的结果 + 当前循环的Item项 };, 0)</span><span class="token keyword">const</span> total <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token keyword">return</span> val <span class="token operator">+</span> item <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span></code></pre><h3 id="reduce链式获取对象属性值"><a href="#reduce链式获取对象属性值" class="headerlink" title="reduce链式获取对象属性值"></a>reduce链式获取对象属性值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>  info<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    address<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      location<span class="token punctuation">:</span> <span class="token string">'秋去冬来'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> attrStr <span class="token operator">=</span> <span class="token string">'info.address.location'</span><span class="token keyword">const</span> location <span class="token operator">=</span> attrStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span></code></pre><h3 id="发布订阅者模式"><a href="#发布订阅者模式" class="headerlink" title="发布订阅者模式"></a>发布订阅者模式</h3><p>####发布者类</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 收集依赖/收集订阅者</span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个subs数组用来存放所有订阅者的信息</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 添加订阅者信息</span>  <span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 发布订阅的方法</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> watcher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="订阅者类"><a href="#订阅者类" class="headerlink" title="订阅者类"></a>订阅者类</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 订阅者的类</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//触发回调的方法</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是一个订阅者'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> w2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是二个订阅者'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>w1<span class="token punctuation">)</span>dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>w2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 只要我们为 Vue 中 data 数据重新赋值了，这个赋值的动作，会被 Vue 监听到</span><span class="token comment" spellcheck="true">// 然后 vue 要把数据的变化，通知到每个订阅者！！！</span><span class="token comment" spellcheck="true">// 接下来，订阅者（DOM元素）要根据最新的数据，更新自己的内容</span><span class="token comment" spellcheck="true">// 1. 谁是订阅者</span><span class="token comment" spellcheck="true">// 2. 为什么要订阅</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="Object-definedProperty"><a href="#Object-definedProperty" class="headerlink" title="Object.definedProperty"></a>Object.definedProperty</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当前属性是否允许循环</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当前属性允许被配置</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人获取了obj.name的值'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'qqdl'</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'qqdl'</span></code></pre><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><p>index.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>姓名是：{;{;name};};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>年龄是：{;{;age};};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>info.a的值是{;{;info.a};};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>name的值是：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>info.a的值是：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info.a<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        info<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>          a<span class="token punctuation">:</span> <span class="token string">'a1'</span><span class="token punctuation">,</span>          c<span class="token punctuation">:</span> <span class="token string">'c1'</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="实现Vue中的getter和setter"><a href="#实现Vue中的getter和setter" class="headerlink" title="实现Vue中的getter和setter"></a>实现Vue中的getter和setter</h4><p>数据劫持Observe</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义一个数据劫持的方法</span><span class="token keyword">function</span> <span class="token function">Observe</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 递归的终止条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// console.log(Object.keys(obj))获取当前obj上的每个属性</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// value子节点进行递归</span>    <span class="token function">Observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(`获取了${;key};`)</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span>        <span class="token keyword">return</span> value      <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> newValue        <span class="token function">Observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 通知每一个订阅者更新自己的文本</span>        dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h4><ul><li>每次在浏览器中查看值都很麻烦都要书写<code>vm.$data</code></li><li>通过<code>属性代理</code>，直接输入<code>vm</code>就能输出<code>vm.$data</code>的内容</li><li>即把this.$data上的属性代理到vm实例上</li><li>实现像vue一样通过this可以直接访问实例中的属性</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 属性代理</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="实现数据、视图绑定"><a href="#实现数据、视图绑定" class="headerlink" title="实现数据、视图绑定"></a>实现数据、视图绑定</h4><p>创建一个文档碎片</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Compile</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取el对应的DOM元素</span>  vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//创建文档碎片，提高DOM操作的性能</span>  <span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>childNode <span class="token operator">=</span> vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>childNode<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//进行模板编译</span>  <span class="token function">replace</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span>  vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>对DOM 模板进行编译的方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 负责对DOM 模板进行编译的方法</span>  <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义匹配插值表达式的正则</span>    <span class="token keyword">const</span> regMustache <span class="token operator">=</span> <span class="token regex">/\{;\{;\s*(\S+)\s*\};\};/</span>    <span class="token comment" spellcheck="true">// 证明当前的node节点是一个文本子节点，需要进行正则的替换</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 文本子节点也是一个DOM对象，，如果想要获取文本子节点的字符串内容，需要调用textCoutent属性获取</span>      <span class="token keyword">const</span> text <span class="token operator">=</span> node<span class="token punctuation">.</span>textContent      <span class="token keyword">const</span> exceResult <span class="token operator">=</span> regMustache<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// console.log(exceResult)</span>      <span class="token comment" spellcheck="true">//进行字符串的正则提取与匹配</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>exceResult<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> value <span class="token operator">=</span> exceResult<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>        node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regMustache<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//创建watcher类实例</span>        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exceResult<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>          node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regMustache<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 终止条件</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断当前的node节点是否为input输入框</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'INPUT'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 得到当前元素的所有属性</span>      <span class="token keyword">const</span> attrs <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span>      <span class="token keyword">const</span> findResult <span class="token operator">=</span> attrs<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'v-model'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>findResult<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> expStr <span class="token operator">=</span> findResult<span class="token punctuation">.</span>value        <span class="token keyword">const</span> value <span class="token operator">=</span> expStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>        node<span class="token punctuation">.</span>value <span class="token operator">=</span> value        <span class="token comment" spellcheck="true">// 创建Watcher实例</span>        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expStr<span class="token punctuation">,</span> <span class="token punctuation">(</span>newObj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>          node<span class="token punctuation">.</span>value <span class="token operator">=</span> newObj        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 监听文本框input输入事件，拿到文本框的最新数据，把最新的值更新到vm上</span>        node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> keyArr <span class="token operator">=</span> expStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>          <span class="token keyword">const</span> obj <span class="token operator">=</span> keyArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> keyArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>          obj<span class="token punctuation">[</span>keyArr<span class="token punctuation">[</span>keyArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 证明不是一个文本节点，可能是一个DOM节点，需要进行递归处理</span>    node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">replace</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="发布订阅者"><a href="#发布订阅者" class="headerlink" title="发布订阅者"></a>发布订阅者</h4><p>收集类</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 今后所有的watcher都要存到这个数组中</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 添加watcher方法</span>  <span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 负责通知每一个watcher的方法</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      watcher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>订阅者类</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// cb回调函数，记录着当前Watcher如何更新自己的文本nr</span>  <span class="token comment" spellcheck="true">// 但是，只知道如何更新还不行，必须拿到最新的数据</span>  <span class="token comment" spellcheck="true">// 因此，还需要知道vm身上众多数据中，拿个数据，才是自己所需要的数据，所以碧玺在new Watcher期间，指定watcher对应数据</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb    <span class="token comment" spellcheck="true">//下面三行代码负责创建Watcher实例，存到Dep实例中的subs数组中</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span>    key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// watcher 实例需要有update函数，从而让发布者能够通知我们更新</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$data <span class="token operator">=</span> options<span class="token punctuation">.</span>data    <span class="token comment" spellcheck="true">// 调用数据劫持的方法</span>    <span class="token function">Observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 属性代理</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue        <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//调用模板编译的函数</span>    <span class="token function">Compile</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义一个数据劫持的方法</span><span class="token keyword">function</span> <span class="token function">Observe</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 递归的终止条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// console.log(Object.keys(obj))获取当前obj上的每个属性</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// value子节点进行递归</span>    <span class="token function">Observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(`获取了${;key};`)</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span>        <span class="token keyword">return</span> value      <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> newValue        <span class="token function">Observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 通知每一个订阅者更新自己的文本</span>        dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对html结构进行编译的方法</span><span class="token keyword">function</span> <span class="token function">Compile</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vm<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取el对应的DOM元素</span>  vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//创建文档碎片，提高DOM操作的性能</span>  <span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>childNode <span class="token operator">=</span> vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>childNode<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//进行模板编译</span>  <span class="token function">replace</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span>  vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 负责对DOM 模板进行编译的方法</span>  <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义匹配插值表达式的正则</span>    <span class="token keyword">const</span> regMustache <span class="token operator">=</span> <span class="token regex">/\{;\{;\s*(\S+)\s*\};\};/</span>    <span class="token comment" spellcheck="true">// 证明当前的node节点是一个文本子节点，需要进行正则的替换</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 文本子节点也是一个DOM对象，，如果想要获取文本子节点的字符串内容，需要调用textCoutent属性获取</span>      <span class="token keyword">const</span> text <span class="token operator">=</span> node<span class="token punctuation">.</span>textContent      <span class="token keyword">const</span> exceResult <span class="token operator">=</span> regMustache<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// console.log(exceResult)</span>      <span class="token comment" spellcheck="true">//进行字符串的正则提取与匹配</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>exceResult<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> value <span class="token operator">=</span> exceResult<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>        node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regMustache<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//创建watcher类实例</span>        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exceResult<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>          node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regMustache<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 终止条件</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断当前的node节点是否为input输入框</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'INPUT'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 得到当前元素的所有属性</span>      <span class="token keyword">const</span> attrs <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span>      <span class="token keyword">const</span> findResult <span class="token operator">=</span> attrs<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'v-model'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>findResult<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> expStr <span class="token operator">=</span> findResult<span class="token punctuation">.</span>value        <span class="token keyword">const</span> value <span class="token operator">=</span> expStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>        node<span class="token punctuation">.</span>value <span class="token operator">=</span> value        <span class="token comment" spellcheck="true">// 创建Watcher实例</span>        <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expStr<span class="token punctuation">,</span> <span class="token punctuation">(</span>newObj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>          node<span class="token punctuation">.</span>value <span class="token operator">=</span> newObj        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 监听文本框input输入事件，拿到文本框的最新数据，把最新的值更新到vm上</span>        node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> keyArr <span class="token operator">=</span> expStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>          <span class="token keyword">const</span> obj <span class="token operator">=</span> keyArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> keyArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>          obj<span class="token punctuation">[</span>keyArr<span class="token punctuation">[</span>keyArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 证明不是一个文本节点，可能是一个DOM节点，需要进行递归处理</span>    node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">replace</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//依赖收集类/watcher订阅者类</span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 今后所有的watcher都要存到这个数组中</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 添加watcher方法</span>  <span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 负责通知每一个watcher的方法</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      watcher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 订阅者类</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// cb回调函数，记录着当前Watcher如何更新自己的文本nr</span>  <span class="token comment" spellcheck="true">// 但是，只知道如何更新还不行，必须拿到最新的数据</span>  <span class="token comment" spellcheck="true">// 因此，还需要知道vm身上众多数据中，拿个数据，才是自己所需要的数据，所以碧玺在new Watcher期间，指定watcher对应数据</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb    <span class="token comment" spellcheck="true">//下面三行代码负责创建Watcher实例，存到Dep实例中的subs数组中</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span>    key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// watcher 实例需要有update函数，从而让发布者能够通知我们更新</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2022/05/24/es6/"/>
      <url>/2022/05/24/es6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h4><h5 id="ES6-模块化规范中定义："><a href="#ES6-模块化规范中定义：" class="headerlink" title="ES6 模块化规范中定义："></a>ES6 模块化规范中定义：</h5><ul><li><p>每个 js 文件都是一个独立的模块</p></li><li><p>导入其它模块成员使用 import 关键字</p></li><li><p>向外共享模块成员使用 export 关键字</p></li></ul><p>node.js 中默认仅支持 CommonJS 模块化规范，若想基于 node.js 体验与学习 ES6 的模块化语法在 package.json 的根节点中添加 “type”: “module” 节点</p><h5 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a><strong>默认导出</strong></h5><p>注意：每个模块中，只允许使用唯一的一次 export default，否则会报错</p><p>默认导出的语法： export default 默认导出的成员</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> n2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    n1<span class="token punctuation">,</span>    show<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a><strong>默认导入</strong></h5><p>注意：默认导入时的接收名称可以任意名称，只要是合法的成员名称即可（不是数字开头）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> m1 <span class="token keyword">from</span> <span class="token string">'./01默认导出.js'</span><span class="token comment" spellcheck="true">//一定要加后缀名</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：每个模块中，只允许使用唯一的一次 export default，否则会报错</p><h5 id="按需导出"><a href="#按需导出" class="headerlink" title="按需导出"></a>按需导出</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">'秋去冬来'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token string">'最帅'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span> <span class="token string">'qda'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h5 id="按需导入"><a href="#按需导入" class="headerlink" title="按需导入"></a>按需导入</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> info<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span> s1<span class="token punctuation">,</span> s2 <span class="token keyword">as</span> qda<span class="token punctuation">,</span> say <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./03按需导入.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qda<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="按需导出与按需导入的注意事项"><a href="#按需导出与按需导入的注意事项" class="headerlink" title="按需导出与按需导入的注意事项"></a>按需导出与按需导入的注意事项</h5><p>① 每个模块中可以使用多次按需导出</p><p>② 按需导入的成员名称必须和按需导出的名称保持一致</p><p>③ 按需导入时，可以使用 as 关键字进行重命名</p><p>④ 按需导入可以和默认导入一起使用</p><h5 id="直接导入并执行模块中的代码"><a href="#直接导入并执行模块中的代码" class="headerlink" title="直接导入并执行模块中的代码"></a><strong>直接导入并执行模块中的代码</strong></h5><p>如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。此时，可以直接导入并执行模 块代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'./05目标模块.js'</span></code></pre><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><h5 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a><strong>回调地狱</strong></h5><p>多层回调函数的相互嵌套，就形成了回调地狱</p><p>回调地狱的缺点：</p><p>⚫   代码耦合性太强，牵一发而动全身，难以维护</p><p>⚫   大量冗余的代码相互嵌套，代码的可读性变差</p><h5 id="Promise-的基本概念"><a href="#Promise-的基本概念" class="headerlink" title="Promise 的基本概念"></a><strong>Promise</strong> <strong>的基本概念</strong></h5><p>① Promise 是一个构造函数</p><ol><li>我们可以创建 Promise 的实例 const p &#x3D; new Promise()；</li><li>new 出来的 Promise 实例对象，代表一个异步操作</li></ol><p>② Promise.prototype 上包含一个 .then() 方法</p><ol><li>每一次 new Promise() 构造函数得到的实例对象</li><li>都可以通过原型链的方式访问到 .then() 方法，例如 p.then()</li></ol><p>③ .then() 方法用来预先指定成功和失败的回调函数</p><ol><li>p.then(成功的回调函数，失败的回调函数)</li><li>p.then(result &#x3D;&gt; { }, error &#x3D;&gt; { })</li><li>调用 .then() 方法时，成功的回调函数是必选的、失败的回调函数是可选的</li></ol><h5 id="基于-then-fs-读取文件内容"><a href="#基于-then-fs-读取文件内容" class="headerlink" title="基于 then-fs 读取文件内容"></a><strong>基于</strong> <strong>then-fs</strong> <strong>读取文件内容</strong></h5><p>安装 then-fs 这个第三方包，从而支持我们基于 Promise 的方式读取文件的内容</p><pre class=" language-js"><code class="language-js">npm i then<span class="token operator">-</span>fs</code></pre><h5 id="then"><a href="#then" class="headerlink" title=".then()"></a><strong>.then()</strong></h5><p>如果上一个 .then() 方法中返回了一个新的 Promise 实例对象，则可以通过下一个 .then() 继续进行处理。通</p><p>过 .then() 方法的链式调用，就解决了回调地狱的问题。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">'then-fs'</span><span class="token punctuation">;</span>thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/11.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/2.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/3.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h5 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a><strong>.catch()</strong></h5><p>在 Promise 的链式操作中如果发生了错误，可以使用 Promise.prototype.catch 方法进行捕获和处理</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">'then-fs'</span><span class="token punctuation">;</span>thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/11.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/2.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/3.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h5 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a><strong>Promise.all()</strong></h5><p>Promise.all() 方法会发起并行的 Promise 异步操作，等所有的异步操作全部结束后才会执行下一步的 .then</p><p>操作（等待机制）。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">"then-fs"</span><span class="token punctuation">;</span><span class="token keyword">const</span> promiseAll <span class="token operator">=</span> <span class="token punctuation">[</span>    thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/2.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promiseAll<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>results <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a><strong>Promise.race()</strong></h5><p>Promise.race() 方法会发起并行的 Promise 异步操作，只要任何一个异步操作完成，就立即执行下一步的</p><p>.then 操作（赛跑机制）。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">"then-fs"</span><span class="token punctuation">;</span><span class="token keyword">const</span> promiseAll <span class="token operator">=</span> <span class="token punctuation">[</span>    thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/2.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>promiseAll<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>results <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>注意：new Promise() 只是创建了一个形式上的异步操作，如果想要创建具体的异步操作，则需要在 new Promise() 构造函数期间，传递一个 function 函数，将具体的 异步操作定义到 function 函数内部</p><h4 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a><strong>async&#x2F;await</strong></h4><p>使用 async&#x2F;await 简化 Promise 异步操作的示例代码如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">'then-fs'</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> r1 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> r2 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/2.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="async-x2F-await-的-使用注意事项"><a href="#async-x2F-await-的-使用注意事项" class="headerlink" title="async&#x2F;await 的****使用注意事项"></a><strong>async&#x2F;await</strong> <strong>的****使用注意事项</strong></h5><p>① 如果在 function 中使用了 await，则 function 必须被 async 修饰</p><p>② 在 async 方法中，第一个 await 之前的代码会同步执行，await 之后的代码会异步执行</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">'then-fs'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> r1 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> r2 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/2.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> r3 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/3.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> r3<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'NB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果：QDA 秋去冬来 最帅 NB</span></code></pre><h4 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a><strong>EventLoop</strong></h4><p>JavaScript 主线程从“任务队列”中读取异步</p><p>任务的回调函数，放到执行栈中依次执行。这 个过程是循环不断的，所以整个的这种运行机 制又称为 EventLoop（事件循环）。</p><h5 id="异步任务："><a href="#异步任务：" class="headerlink" title="异步任务："></a>异步任务：</h5><p>又叫做耗时任务，异步任务由 JavaScript 委托给宿主环境进行执行</p><p>当异步任务执行完成后，会通知 JavaScript 主线程执行异步任务的回调函数是通过回调函数实现的</p><p>有     普通事件：如click resize等   资源加载：load error等    定时器：setInterval setTimeout等</p><h5 id="同步任务："><a href="#同步任务：" class="headerlink" title="同步任务："></a>同步任务：</h5><p>又叫做非耗时任务，指的是在主线程上排队执行的那些任务</p><p>只有前一个任务执行完毕，才能执行后一个任务</p><ol><li><p>都是在主线程上执行的，形成一个执行栈</p></li><li><p>又叫做非耗时任务，指的是在主线程上排队执行的那些任务</p></li></ol><p>   只有前一个任务执行完毕，才能执行后一个任务</p><h4 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a><strong>宏任务和微任务</strong></h4><p>JavaScript 把异步任务又做了进一步的划分，异步任务又分为两类，分别是：</p><p>① 宏任务（macrotask）</p><p>异步 Ajax 请求     setTimeout、setInterval    文件操作    其它宏任务</p><p>② 微任务（microtask）</p><p>Promise.then、.catch 和 .finally     process.nextTick    其它微任务</p><p>每一个宏任务执行完之后，都会检查是否存在待执行的微任务，</p><p>如果有，则执行完所有微任务之后，再继续执行下一个宏任务。</p><h4 id="数据深拷贝"><a href="#数据深拷贝" class="headerlink" title="数据深拷贝"></a>数据深拷贝</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> form<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addForm<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>原始数据类型Symbol，它表示独一无二的值 最大的用途是：用来定义对象的私有变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">const</span> name2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">===</span> name2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'s1'</span><span class="token punctuation">)</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'秋去冬来'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//obj[s1] = '秋去冬来'</span><span class="token comment" spellcheck="true">//如果用Symbol定义对象中的变量，取值时一定用[变量名]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取Symbol里面的属性名</span><span class="token comment" spellcheck="true">//let s=Object.getOwnPropertySymbols(obj)</span><span class="token keyword">let</span> m<span class="token operator">=</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>集合：表示无重复值的有序列表</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加元素</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除元素</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//校验某个值是否在集合中</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 访问集合长度</span><span class="token keyword">set</span><span class="token punctuation">.</span>size<span class="token comment" spellcheck="true">//1.set中对象的引用无法被释放</span><span class="token comment" spellcheck="true">// let set3 = new Set(), obj = {;};</span><span class="token comment" spellcheck="true">// set3.add(obj)</span><span class="token comment" spellcheck="true">// //释放当前的资源</span><span class="token comment" spellcheck="true">// obj = null</span></code></pre><h4 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h4><p>1.不能使用得对象类型的数据2.不可以迭代3.没有forEach4.没有size属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> set4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>set3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//释放当前的资源</span>obj <span class="token operator">=</span> <span class="token keyword">null</span></code></pre><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map类型是键值对的有序列表，键和值是任意类型</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置值</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'qqdl'</span><span class="token punctuation">,</span> <span class="token string">'秋去冬来'</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'qqd'</span><span class="token punctuation">,</span> <span class="token string">'秋去冬来'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'qqdl'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'qqdl'</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'qqdl'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// map.clear()</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>   <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="可选链接操作符"><a href="#可选链接操作符" class="headerlink" title="可选链接操作符"></a>可选链接操作符</h3><p>如果前面的对象不成立，则返回undefined，如果成立，才可以继续操作</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>nus<span class="token punctuation">.</span>length<span class="token operator">?</span><span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//,,,后续操作</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>饮用水</title>
      <link href="/2022/05/07/shui-fei/"/>
      <url>/2022/05/07/shui-fei/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th>时间</th><th>数量&#x2F;桶</th><th>金额(￥)</th><th>付款人</th></tr></thead><tbody><tr><td>2022-05-07</td><td>2</td><td>28</td><td>qda</td></tr><tr><td>2022-05-12</td><td>2</td><td>28</td><td>xyj</td></tr><tr><td>2022-05-23</td><td>2</td><td>28</td><td>clx</td></tr><tr><td>2022-05-23</td><td>2</td><td>28</td><td>yhh</td></tr><tr><td>2022-06-07</td><td>2</td><td>28</td><td>yjx</td></tr><tr><td>2022-06-13</td><td>2</td><td>28</td><td>qda</td></tr><tr><td>2022-06-13</td><td>2</td><td>28</td><td>xyj</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 饮用水 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="/2022/05/04/node/"/>
      <url>/2022/05/04/node/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-什么是node"><a href="#1-什么是node" class="headerlink" title="1 什么是node"></a>1 什么是node</h3><p>①浏览器是 JavaScript 的前端运行环境。</p><p>②Node.js 是 JavaScript 的后端运行环境。</p><p>③Node.js 中无法调用 DOM 和 BOM 等浏览器内置 API。</p><h3 id="2-终端中的快捷键"><a href="#2-终端中的快捷键" class="headerlink" title="2 终端中的快捷键"></a>2 终端中的快捷键</h3><p>在 Windows 的 powershell 或 cmd 终端中，我们可以通过如下快捷键，来提高终端的操作效率：</p><p>①使用 ↑ 键，可以快速定位到上一次执行的命令</p><p>②使用 tab 键，能够快速补全路径</p><p>③使用 esc 键，能够快速清空当前已输入的命令</p><p>④输入 cls 命令，可以清空终端</p><p>Shift +鼠标右键打开powershell</p><h3 id="3-文件操作模块"><a href="#3-文件操作模块" class="headerlink" title="3 文件操作模块"></a>3 文件操作模块</h3><p>如果要在 JavaScript 代码中，使用 fs 模块来操作文件，则需要使用如下的方式先导入它：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></code></pre><h4 id="3-1-fs-readFile-的语法格式"><a href="#3-1-fs-readFile-的语法格式" class="headerlink" title="3.1 fs.readFile() 的语法格式"></a>3.1 fs.readFile() 的语法格式</h4><p>使用 fs.readFile() 方法，可以读取指定文件中的内容，语法格式如下：</p><pre class=" language-js"><code class="language-js"> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span>options<span class="token punctuation">]</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span></code></pre><p>参数解读：</p><ol><li>参数1：必选参数，字符串，表示文件的路径。</li><li>参数2：可选参数，表示以什么编码格式来读取文件。</li><li>参数3：必选参数，文件读取完成后，通过回调函数拿到读取的结果。</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./file/1.text'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'dataStr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="3-2-fs-writeFile-的语法格式"><a href="#3-2-fs-writeFile-的语法格式" class="headerlink" title="3.2  fs.writeFile() 的语法格式"></a>3.2  fs.writeFile() 的语法格式</h4><p>使用 fs.writeFile() 方法，可以向指定的文件中写入内容，语法格式如下：</p><pre class=" language-javascript"><code class="language-javascript"> fs<span class="token punctuation">.</span><span class="token function">writerFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>data<span class="token punctuation">[</span><span class="token punctuation">,</span>options<span class="token punctuation">]</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span></code></pre><p>参数解读：</p><p>参数1：必选参数，需要指定一个文件路径的字符串，表示文件的存放路径。</p><p>参数2：必选参数，表示要写入的内容。</p><p>参数3：可选参数，表示以什么格式写入文件内容，默认值是 utf8。</p><p>参数4：必选参数，文件写入完成后的回调函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./file/1.text'</span><span class="token punctuation">,</span><span class="token string">'qdanp'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'dataStr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="4-path"><a href="#4-path" class="headerlink" title="4 path"></a>4 path</h3><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。</p><p>例如：</p><p> path.join() 方法，用来将多个路径片段拼接成一个完整的路径字符串</p><p> path.basename() 方法，用来从路径字符串中，将文件名解析出来</p><p>如果要在 JavaScript 代码中，使用 path 模块来处理路径，则需要使用如下的方式先导入它：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> path<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span></code></pre><h4 id="4-1-path-join-的语法格式"><a href="#4-1-path-join-的语法格式" class="headerlink" title="4.1 path.join() 的语法格式"></a>4.1 path.join() 的语法格式</h4><p>使用 path.join() 方法，可以把多个路径片段拼接为完整的路径字符串，语法格式如下：</p><pre class=" language-js"><code class="language-js"> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span>paths<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>参数解读：</p><p>…paths <string> 路径片段的序列</p><p>返回值: <string></p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> pathStr<span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span><span class="token string">'/b/c'</span><span class="token punctuation">,</span><span class="token string">'../'</span><span class="token punctuation">,</span><span class="token string">'./d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出a/b/d/e</span>  <span class="token keyword">const</span> pathStr2<span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./file/1.text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathStr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出当前文件所在的目录 \file\1.text</span></code></pre><p>注意：今后凡是涉及到路径拼接的操作，都要使用 path.join() 方法进行处理。不要直接使用 + 进行字符串的拼接。</p><h4 id="4-2-path-basename-的语法格式"><a href="#4-2-path-basename-的语法格式" class="headerlink" title="4.2 path.basename() 的语法格式"></a>4.2 path.basename() 的语法格式</h4><pre class=" language-js"><code class="language-js"> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span>ext<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参数解读：</p><p>path <string> 必选参数，表示一个路径的字符串</p><p>ext <string> 可选参数，表示文件扩展名</p><p>返回: <string> 表示路径中的最后一部分</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> fpath<span class="token operator">=</span><span class="token string">'/a/b/c/index.html'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件存放路径</span>  <span class="token keyword">var</span> fullname<span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fullname<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出index.html</span>  <span class="token keyword">var</span> nameWithoutExt <span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span><span class="token string">'./html'</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameWithoutExt<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出index</span></code></pre><h4 id="4-3-path-extname-的语法格式"><a href="#4-3-path-extname-的语法格式" class="headerlink" title="4.3 path.extname() 的语法格式"></a>4.3 path.extname() 的语法格式</h4><p>使用 path.extname() 方法，可以获取路径中的扩展名部分，语法格式如下：</p><pre class=" language-js"><code class="language-js"> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> </code></pre><p>参数解读：</p><p>path <string>必选参数，表示一个路径的字符串</p><p>返回: <string> 返回得到的扩展名字符串</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> fpath<span class="token operator">=</span><span class="token string">'/a/b/c/index.html'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件存放路径</span>  cosnt fext <span class="token operator">=</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出.html</span></code></pre><p>①fs.writeFile() 方法只能用来创建文件，不能用来创建路径</p><p>②重复调用 fs.writeFile() 写入同一个文件，新写入的内容会覆盖之前的旧内容</p><h3 id="5-创建-web-服务器的基本步骤"><a href="#5-创建-web-服务器的基本步骤" class="headerlink" title="5 创建 web 服务器的基本步骤"></a>5 创建 web 服务器的基本步骤</h3><p>①导入 http 模块</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> http<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>②创建 web 服务器实例</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> srever<span class="token operator">=</span>http<span class="token punctuation">.</span><span class="token function">crateServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>③为服务器实例绑定 request 事件，监听客户端的请求</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//使用服务器实例的.on()方法，为服务器绑定一个request事件</span> server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//只有客户端来请求我们的服务器，就会触发request事件，从而调用这个事件处理函数</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Someone visit our web server.'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>④启动服务器</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//调用server.listen(端口号，cd回调)方法，即可启动web服务器</span> server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http server running at http://127.0.0.1:80'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="5-1-req-请求对象"><a href="#5-1-req-请求对象" class="headerlink" title="5.1 req 请求对象"></a>5.1 req 请求对象</h4><p>只要服务器接收到了客户端的请求，就会调用通过 server.on() 为服务器绑定的 request 事件处理函数。</p><p>如果想在事件处理函数中，访问与客户端相关的数据或属性，可以使用如下的方式：</p><pre class=" language-js"><code class="language-js"> server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//req是请求对象，它包含客户端相关的属性和数据，例如：</span>    <span class="token comment" spellcheck="true">//req.url是客户端请求的地址</span>    <span class="token comment" spellcheck="true">//req.method是客户端的请求类型</span>    cosnt str<span class="token operator">=</span><span class="token template-string"><span class="token string">`Your request url is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;,and request method is</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;`</span></span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="5-2-res-响应对象"><a href="#5-2-res-响应对象" class="headerlink" title="5.2 res 响应对象"></a>5.2 res 响应对象</h4><p>在服务器的 request 事件处理函数中，如果想访问与服务器相关的数据或属性，可以使用如下的方式：</p><pre class=" language-js"><code class="language-js">  server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//res是响应对象，它包含客户端相关的属性和数据，例如：</span>    <span class="token comment" spellcheck="true">//要发送到客户端的字符串</span>    cosnt str<span class="token operator">=</span><span class="token template-string"><span class="token string">`Your request url is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;,and request method is</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;`</span></span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//res.end()方法的作用</span>    <span class="token comment" spellcheck="true">//向客户端发送指定的内容，并发结束这次请求处理过程</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="5-3-解决中文乱码问题"><a href="#5-3-解决中文乱码问题" class="headerlink" title="5.3 解决中文乱码问题"></a>5.3 解决中文乱码问题</h4><p>当调用 res.end() 方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式：</p><pre class=" language-js"><code class="language-js"> server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//发送内容包含中文</span>     <span class="token keyword">const</span> str<span class="token operator">=</span><span class="token template-string"><span class="token string">`请求URL地址是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;，请求的地类型是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;`</span></span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//为了防止出现中文乱码问题，需要设置响应头Content-Type 的值为text/html;charset=utf-8</span>     res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//把包含中文的内容，响应给请求头</span>     res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="5-4-根据不同的-url-响应不同的-html-内容"><a href="#5-4-根据不同的-url-响应不同的-html-内容" class="headerlink" title="5.4 根据不同的 url 响应不同的 html 内容"></a>5.4 根据不同的 url 响应不同的 html 内容</h4><p>核心实现步骤</p><p>①获取请求的 url 地址</p><p>②设置默认的响应内容为 404 Not found</p><p>③判断用户请求的是否为 &#x2F; 或 &#x2F;index.html 首页</p><p>④判断用户请求的是否为 &#x2F;about.html 关于页面</p><p>⑤设置 Content-Type 响应头，防止中文乱码</p><p>⑥使用 res.end() 把内容响应给客户端</p><pre class=" language-js"><code class="language-js"> server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     cosnt url<span class="token operator">=</span>req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//获取请求的URL地址</span>     <span class="token keyword">let</span> content<span class="token operator">=</span><span class="token template-string"><span class="token string">`&lt;h1>404 Not found&lt;/h1>`</span></span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//设置默认的响应内容为 404 Not found</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">===</span><span class="token string">'/'</span> url<span class="token operator">===</span><span class="token string">'/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>         content<span class="token operator">=</span><span class="token string">'&lt;h1>首页&lt;/h1>'</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//用户请求的是首页</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token operator">===</span><span class="token string">'/about.html'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>         constent<span class="token operator">=</span><span class="token string">'&lt;h1>关于&lt;/h1>'</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//用户请求的是关于界面</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止中文乱码</span>     res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>constent<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//把内容发送给客户端</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="6-什么是模块化"><a href="#6-什么是模块化" class="headerlink" title="6 什么是模块化"></a>6 什么是模块化</h3><p>模块化是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元。</p><h4 id="6-1-加载模块"><a href="#6-1-加载模块" class="headerlink" title="6.1 加载模块"></a>6.1 加载模块</h4><p>注意：使用 require() 方法加载其它模块时，会执行被加载模块中的代码。</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//加载内置fs模块</span> <span class="token keyword">const</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//加载用户自定义模块</span> <span class="token keyword">const</span> custom<span class="token operator">=</span><span class="token function">requir</span><span class="token punctuation">(</span><span class="token string">'./custom.js'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//加载第三方模块</span> <span class="token keyword">const</span> moment <span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="6-2-module-exports-对象"><a href="#6-2-module-exports-对象" class="headerlink" title="6.2 module.exports 对象"></a>6.2 module.exports 对象</h4><p>在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用。</p><p>外界用 require() 方法导入自定义模块时，得到的就是 module.exports 所指向的对象。</p><p>使用 require() 方法导入模块时，导入的结果，永远以 module.exports 指向的对象为准。</p><h4 id="6-3-exports-对象"><a href="#6-3-exports-对象" class="headerlink" title="6.3 exports 对象"></a>6.3 exports 对象</h4><p>由于 module.exports 单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了 exports 对象。</p><p>默认情况下，exports 和 module.exports 指向同一个对象。</p><p>最终共享的结果，还是以 module.exports 指向的对象为准。</p><h3 id="7-Node-js-中的模块化规范"><a href="#7-Node-js-中的模块化规范" class="headerlink" title="7 Node.js 中的模块化规范"></a>7 Node.js 中的模块化规范</h3><p>Node.js 遵循了 CommonJS 模块化规范，CommonJS 规定了模块的特性和各模块之间如何相互依赖。</p><h4 id="7-1CommonJS-规定："><a href="#7-1CommonJS-规定：" class="headerlink" title="7.1CommonJS 规定："></a>7.1CommonJS 规定：</h4><p>每个模块内部，module 变量代表当前模块。</p><p>module 变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口。</p><p>加载某个模块，其实是加载该模块的 module.exports 属性。require() 方法用于加载模块。</p><p>注意：</p><p> 从 <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> 网站上搜索自己所需要的包</p><p> 从 <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a>  服务器上下载自己需要的包</p><h4 id="7-2-快速创建-package-json"><a href="#7-2-快速创建-package-json" class="headerlink" title="7.2 快速创建 package.json"></a>7.2 快速创建 package.json</h4><pre class=" language-js"><code class="language-js"> npm init <span class="token operator">-</span>y</code></pre><p>注意：</p><p>①上述命令只能在英文的目录下成功运行！所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格。</p><p>②运行 npm install 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json 中。</p><p>package.json 文件中，有一个 dependencies 节点，专门用来记录您使用 npm install 命令安装了哪些包。</p><p>可以运行 npm install 命令（或 npm i）一次性安装所有的依赖包：</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//执行npm install 命令时，npm包管理工具会先读取package.json中的dependcies节点</span> <span class="token comment" spellcheck="true">//读取记录所有依赖包和版本号之后，npm包管路工具会一次性包这些包下载到项目中</span> npm install </code></pre><p>可以运行 npm uninstall 命令，来卸载指定的包：</p><h4 id="7-3-devDependencies-节点"><a href="#7-3-devDependencies-节点" class="headerlink" title="7.3 devDependencies 节点"></a>7.3 devDependencies 节点</h4><p>如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到 devDependencies 节点中。</p><p>与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到 dependencies 节点中。</p><p>您可以使用如下的命令，将包记录到 devDependencies 节点中：</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//安装指定包，并记录到devDependencies节点中</span> npm i 包名 <span class="token operator">-</span>D <span class="token comment" spellcheck="true">//完整写法</span> npm install 包名 <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre><h4 id="7-4-切换-npm-的下包镜像源"><a href="#7-4-切换-npm-的下包镜像源" class="headerlink" title="7.4 切换 npm 的下包镜像源"></a>7.4 切换 npm 的下包镜像源</h4><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//查看当前的包镜像源</span> npm config <span class="token keyword">get</span> registry <span class="token comment" spellcheck="true">//切换下载镜像源</span> npm config <span class="token keyword">set</span> registry<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span> <span class="token comment" spellcheck="true">//检查是否下载成功</span> npm config <span class="token keyword">get</span> registry  <span class="token comment" spellcheck="true">//nrm为了更方便的切换下包的镜像源，我们可以安装 nrm 这个小工具，利用 nrm 提供的终端命令，可以快速查看和切换下包的镜像源。</span>npm i nrm <span class="token operator">-</span>g<span class="token comment" spellcheck="true">//查看所有可用的镜像源</span>nrm ls<span class="token comment" spellcheck="true">//切换镜像源</span>nrm use taobao</code></pre><h4 id="7-5-i5ting-toc"><a href="#7-5-i5ting-toc" class="headerlink" title="7.5 i5ting_toc"></a>7.5 i5ting_toc</h4><p>i5ting_toc 是一个可以A把 md 文档转为 html 页面的小工具，使用步骤如下：</p><pre class=" language-js"><code class="language-js"> npm installl <span class="token operator">-</span>g i5ting_toc 5ting_toc <span class="token operator">-</span>f 要转换md文件路径<span class="token operator">-</span>o</code></pre><p>内置模块是由 Node.js 官方提供的模块，内置模块的加载优先</p><p>使用 require() 加载自定义模块时，必须指定以 .&#x2F; 或 ..&#x2F; 开头的路径标识符。在加载自定义模块时，如果没有指定 .&#x2F; 或 ..&#x2F; 这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。</p><p>同时，在使用 require() 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件：</p><p>①按照确切的文件名进行加载</p><p>②补全 .js 扩展名进行加载</p><p>③补全 .json 扩展名进行加载</p><p>④补全 .node 扩展名进行加载</p><p>⑤加载失败，终端报错</p><h4 id="7-6-第三方模块的加载机制"><a href="#7-6-第三方模块的加载机制" class="headerlink" title="7.6 第三方模块的加载机制"></a>7.6 第三方模块的加载机制</h4><p>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。</p><p>当把目录作为模块标识符，传递给 require() 进行加载的时候，有三种加载方式：</p><p>在被加载的目录下查找一个叫做 package.json 的文件，并寻找 main 属性，作为 require() 加载的入口</p><p>如果目录里没有 package.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件。</p><p>如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error: Cannot find module ‘xxx’</p><h3 id="8-创建基本的-Web-服务器"><a href="#8-创建基本的-Web-服务器" class="headerlink" title="8 创建基本的 Web 服务器"></a>8 创建基本的 Web 服务器</h3><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//导入express模块</span><span class="token keyword">const</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建web服务器</span><span class="token keyword">const</span> app<span class="token operator">=</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用app.listen接口启动服务器</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http server running at http://127.0.0.1:80'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>1 通过 app.get() 方法，可以监听客户端的 GET 请求，具体的语法格式如下：</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//参数1：客户请求的url地址</span> <span class="token comment" spellcheck="true">//参数2：请求对应的处理函数</span> <span class="token comment" spellcheck="true">//req:请求对象（包含了请求相关的属性和方法）</span> <span class="token comment" spellcheck="true">//res:响应对象（包含了响应相关的属性和方法）</span> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'请求url'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token regex">/**处理函数/</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>2 通过 app.post() 方法，可以监听客户端的 POST 请求，具体的语法格式如下：</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//参数1：客户请求的url地址</span> <span class="token comment" spellcheck="true">//参数2：请求对应的处理函数</span> <span class="token comment" spellcheck="true">//req:请求对象（包含了请求相关的属性和方法）</span> <span class="token comment" spellcheck="true">//res:响应对象（包含了响应相关的属性和方法）</span> app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'请求url'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token regex">/**处理函数/</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>3 通过 res.send() 方法，可以把处理好的内容，发送给客户端：</p><pre class=" language-js"><code class="language-js"> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//向客户端发送JSON对象</span>     res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span>object<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>     res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'丘东安'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>4 通过 req.query 对象，可以访问到客户端通过查询字符串的形式，发送到服务器的参数：</p><p>注意：默认情况下res.query是一个空对象</p><pre class=" language-js"><code class="language-js"> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//客户端使用?name=qda&amp;age=21这种查询字符串的形式，发送到服务器的参数</span>     <span class="token comment" spellcheck="true">//可以通过req.query对象访问 例如：</span>     <span class="token comment" spellcheck="true">//req.query.name req.query.age</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>5 通过 req.params 对象，可以访问到 URL 中，通过 : 匹配到的动态参数：默认是一个空对象</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//url地址中可以听过：参数名 的形式，匹配动态参数值</span> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//req.parame默认是一个空对象</span>     <span class="token comment" spellcheck="true">//里面存放通过：动态匹配到的参数值</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="9-托管静态资源"><a href="#9-托管静态资源" class="headerlink" title="9 托管静态资源"></a>9 托管静态资源</h3><p>express 提供了一个非常好用的函数，叫做 express.static()，通过它，我们可以非常方便地创建一个静态资源服务器，例如，通过如下代码就可以将 public 目录下的图片、CSS 文件、JavaScript 文件对外开放访问了：</p><pre class=" language-js"><code class="language-js"> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>注意：Express 在指定的静态目录中查找文件，并对外提供资源的访问路径。</p><p>因此，存放静态文件的目录名不会出现在 URL 中。</p><p>URL地址拼接时不可以用在&#x2F;前面不可以加. 导入资源时可以.&#x2F;这样写</p><h3 id="10-常见的中间件用法："><a href="#10-常见的中间件用法：" class="headerlink" title="10 常见的中间件用法："></a>10 常见的中间件用法：</h3><h4 id="①应用级别的中间件"><a href="#①应用级别的中间件" class="headerlink" title="①应用级别的中间件"></a>①应用级别的中间件</h4><p>通过 app.use() 或 app.get() 或 app.post() ，绑定到 app 实例上的中间件，叫做应用级别的中间件，代码示例如下：</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//全局中间件</span> app<span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//局部中间件</span> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>mv1<span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Home page'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="②-路由级别的中间件"><a href="#②-路由级别的中间件" class="headerlink" title="② 路由级别的中间件"></a>② 路由级别的中间件</h4><p>绑定到 express.Router() 实例上的中间件，叫做路由级别的中间件。它的用法和应用级别中间件没有任何区别。只不过，应用级别中间件是绑定到 app 实例上，路由级别中间件绑定到 router 实例上，代码示例如下：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> express<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> router<span class="token operator">=</span>express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//路由级别的中间件</span> router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">,</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="③错误级别的中间件"><a href="#③错误级别的中间件" class="headerlink" title="③错误级别的中间件"></a>③错误级别的中间件</h4><p>错误级别中间件的作用：专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。</p><p>格式：错误级别中间件的 function 处理函数中，必须有 4 个形参，形参顺序从前到后，分别是 (err, req, res, next)。</p><p>注意：错误级别的中间件，必须注册在所有路由之后！</p><pre class=" language-js"><code class="language-js"> app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//路由</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'服务器内部发生了错误！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抛出一个自定义错误</span>     res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Home page'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//错误级别的中间件</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发生了错误'</span><span class="token operator">+</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在服务器打印错误信息</span>     res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'发生了错误'</span><span class="token operator">+</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//向客户端响应错误相关内容</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="④-Express-内置的中间件"><a href="#④-Express-内置的中间件" class="headerlink" title="④ Express 内置的中间件"></a>④ Express 内置的中间件</h4><p>自 Express 4.16.0 版本开始，Express 内置了 3 个常用的中间件，极大的提高了 Express 项目的开发效率和体验：</p><p> express.static 快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等（无兼容性）</p><p> express.json 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</p><p> express.urlencoded 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</p><pre class=" language-js"><code class="language-js"> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span>extended<span class="token punctuation">:</span>fales<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="⑤-第三方的中间件"><a href="#⑤-第三方的中间件" class="headerlink" title="⑤ 第三方的中间件"></a>⑤ 第三方的中间件</h4><h3 id="10-使用-querystring-模块解析请求体数据"><a href="#10-使用-querystring-模块解析请求体数据" class="headerlink" title="10 使用 querystring 模块解析请求体数据"></a>10 使用 querystring 模块解析请求体数据</h3><p>Node.js 内置了一个 querystring 模块，专门用来处理查询字符串。通过这个模块提供的 parse() 函数，可以轻松把查询字符串，解析成对象的格式。示例代码如下：</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">const</span> qs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> body<span class="token operator">=</span>qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre><p>get通过req.query获得客户端通过查询字符串发送到服务器的数据</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">const</span> query <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span></code></pre><p>post通过req.body获取请求体中包含的url-encoded数据</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> body <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span></code></pre><p>注意：如果要获取 URL-encoded 格式的请求体数据，必须配置中间件 app.use(express.urlencoded({ extended: false }))</p><h3 id="11-跨域问题"><a href="#11-跨域问题" class="headerlink" title="11 跨域问题"></a>11 跨域问题</h3><p>cors 是 Express 的一个第三方中间件。通过安装和配置 cors 中间件，可以很方便地解决跨域问题。</p><p>使用步骤分为如下 3 步：</p><p>运行 npm install cors 安装中间件</p><pre class=" language-js"><code class="language-js">npm install cors</code></pre><p>使用 const cors &#x3D; require(‘cors’) 导入中间件</p><p>在路由之前调用 app.use(cors()) 配置中间件</p><p>&#x2F;&#x2F;一定要在路由之前配置cors这个中间件，从而解决接口跨域的问题</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>简单请求和预检请求的区别</p><p>简单请求的特点：客户端与服务器之间只会发生一次请求。</p><p>预检请求的特点：客户端与服务器之间会发生两次请求，OPTION 预检请求成功之后，才会发起真正的请求。</p><h3 id="12-MySQL"><a href="#12-MySQL" class="headerlink" title="12 MySQL"></a>12 MySQL</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//注意：如果执行的是select查询语句，则执行结果是数组</span><span class="token comment" spellcheck="true">//如果执行的是insert into,update,delete语句则results是一个对象，可以通过results.affectRows属性来判断是否插入成功</span></code></pre><p>注意：千万不要使用 Cookie 存储重要且隐私的数据！比如用户的身份信息、密码等。</p><p>注意：</p><p>当前端请求后端接口不存在跨域问题的时候，推荐使用 Session 身份认证机制。</p><p>当前端需要跨域请求后端接口的时候，不推荐使用 Session 身份认证机制，推荐使用 JWT 认证机制。</p><h3 id="13-JWT"><a href="#13-JWT" class="headerlink" title="13 JWT"></a>13 JWT</h3><p>JWT总结：用户的信息通过 Token 字符串的形式，保存在客户端浏览器中。服务器通过还原 Token 字符串的形式来认证用户的身份。服务器端不存储</p><p>JWT 通常由三部分组成，分别是 Header（头部）、Payload（有效荷载）、Signature（签名）。</p><p>三者之间使用英文的“.”分隔，格式如下：</p><pre class=" language-js"><code class="language-js"> Header<span class="token punctuation">.</span>Payload<span class="token punctuation">.</span>Signature</code></pre><h5 id="安装-JWT-相关的包"><a href="#安装-JWT-相关的包" class="headerlink" title="安装 JWT 相关的包"></a>安装 JWT 相关的包</h5><ul><li>jsonwebtoken 用于生成 JWT 字符串</li><li>express-jwt 用于将 JWT 字符串解析还原成 JSON 对象</li></ul><pre class=" language-js"><code class="language-js">npm install jsonwebtoken express<span class="token operator">-</span>jwt</code></pre><h5 id="导入-JWT-相关的包"><a href="#导入-JWT-相关的包" class="headerlink" title="导入 JWT 相关的包"></a>导入 JWT 相关的包</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.导入用于生成JWT字符的包</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">reqire</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2.导入用于客户端发送过来的JWT字符串，解析还原成JSON对象包</span><span class="token keyword">const</span> expressJWT <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-jwt'</span><span class="token punctuation">)</span></code></pre><h5 id="定义-secret-密钥"><a href="#定义-secret-密钥" class="headerlink" title="定义 secret 密钥"></a>定义 secret 密钥</h5><p>为了保证 JWT 字符串的安全性，防止 JWT 字符串在网络传输过程中被别人破解，我们需要专门定义一个用于加密和解密的 secret 密钥：</p><p>当生成 JWT 字符串的时候，需要使用 secret 密钥对用户的信息进行加密，最终得到加密好的 JWT 字符串</p><p>当把 JWT 字符串解析还原成 JSON 对象的时候，需要使用 secret 密钥进行解密</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//secret 密钥的本质，就是一个字符串</span><span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">'qqdl_qda'</span></code></pre><h5 id="在登录成功后生成-JWT-字符串"><a href="#在登录成功后生成-JWT-字符串" class="headerlink" title="在登录成功后生成 JWT 字符串"></a>在登录成功后生成 JWT 字符串</h5><p>调用 jsonwebtoken 包提供的 sign() 方法，将用户的信息加密成 JWT 字符串，响应给客户端：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//登录接口</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api/login'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...省略失败的代码</span>    <span class="token comment" spellcheck="true">//用户登录成功之后，生成JWT字符串，通过token属性响应给客户端</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        status<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        message<span class="token punctuation">:</span> <span class="token string">'登录成功'</span>，          <span class="token comment" spellcheck="true">//调用jwt.sing()生成JWT字符串，昂参数分贝是：用户信息对象，加密密钥，配置对象</span>        token<span class="token punctuation">:</span>jwt<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span>username<span class="token punctuation">:</span> userinfi<span class="token punctuation">.</span>usernaem<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span>secreKey<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">;</span>expiresIn<span class="token punctuation">:</span><span class="token string">'30s'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h5 id="将-JWT-字符串还原为-JSON-对象"><a href="#将-JWT-字符串还原为-JSON-对象" class="headerlink" title="将 JWT 字符串还原为 JSON 对象"></a>将 JWT 字符串还原为 JSON 对象</h5><p>客户端每次在访问那些有权限接口的时候，都需要主动通过请求头中的 Authorization 字段，将 Token 字符串发送到服务器进行身份认证。</p><p>此时，服务器可以通过 express-jwt 这个中间件，自动将客户端发送过来的 Token 解析还原成 JSON 对象：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//使用app.use()来注册中间件</span><span class="token comment" spellcheck="true">//expressJWT({;secret: secretKey};) 就是用来解析Token的中间件</span><span class="token comment" spellcheck="true">// .unless({;path: [/^\/api\//]};) 用来指定哪些接口不需要访问权限</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">expressJWT</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span>secret<span class="token punctuation">:</span> secretKey<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span>path<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">/</span><span class="token operator">^</span>\<span class="token operator">/</span>api\<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h5 id="使用-req-user-获取用户信息"><a href="#使用-req-user-获取用户信息" class="headerlink" title="使用 req.user 获取用户信息"></a>使用 req.user 获取用户信息</h5><p>当 express-jwt 这个中间件配置成功之后，即可在那些有权限的接口中，使用 req.user 对象，来访问从 JWT 字符串中解析出来的用户信息了，示例代码如下</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这是一个有权限的接口</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/admin/getinfo'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>user<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        status<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        message<span class="token punctuation">:</span> <span class="token string">'获取用户信息成功'</span>        data<span class="token punctuation">:</span> req<span class="token punctuation">.</span>user    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h5 id="捕获解析-JWT-失败后产生的错误"><a href="#捕获解析-JWT-失败后产生的错误" class="headerlink" title="捕获解析 JWT 失败后产生的错误"></a>捕获解析 JWT 失败后产生的错误</h5><p>当使用 express-jwt 解析 Token 字符串时，如果客户端发送过来的 Token 字符串过期或不合法，会产生一个解析失败的错误，影响项目的正常运行。我们可以通过 Express 的错误中间件，捕获这个错误并进行相关的处理，示例代码如下</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//token解析失败导致的错误</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'UnauthoriZedError'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span> status<span class="token punctuation">:</span> <span class="token number">401</span><span class="token punctuation">,</span>message<span class="token punctuation">:</span> <span class="token string">'无效token'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//其他错误原因导致</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span>status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>messgae<span class="token punctuation">:</span> <span class="token string">'未知错误'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="14-密码加密"><a href="#14-密码加密" class="headerlink" title="14 密码加密"></a>14 密码加密</h3><p>为了保证密码的安全性，不建议在数据库以 明文 的形式保存用户密码，推荐对密码进行 加密存储</p><p>在当前项目中，使用 bcryptjs 对用户密码进行加密，优点： 加密之后的密码，无法被逆向破解 </p><p>同一明文密码多次加密，得到的加密结果各不相同，保证了安全性</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//安装bcryptjs </span> npm i bcryptjs   <span class="token comment" spellcheck="true">//导入bcryptjs </span><span class="token keyword">const</span> bcryptjs <span class="token operator">=</span><span class="token function">requies</span><span class="token punctuation">(</span><span class="token string">'bcryptjs '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用bcryptj.hasnSync(明文密码，随机盐的长度（）)</span>userinfo<span class="token punctuation">.</span>password<span class="token operator">=</span>bcrypt<span class="token punctuation">.</span><span class="token function">hasnSync</span><span class="token punctuation">(</span>userinfo<span class="token punctuation">.</span>password<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  配置解析 Token 的中间件 运行如下的命令，安装解析 Token 的中间件</p><pre class=" language-js"><code class="language-js">npm i express<span class="token operator">-</span>jwt@<span class="token number">5.3</span><span class="token punctuation">.</span><span class="token number">3</span></code></pre><ol><li><p>joi.ref(‘oldPwd’) 表示 newPwd 的值必须和 oldPwd 的值保持一致</p></li><li><p>joi.not(joi.ref(‘oldPwd’)) 表示 newPwd 的值不能等于 oldPwd 的值 </p></li><li><p>.concat() 用于合并 joi.not(joi.ref(‘oldPwd’)) 和 password 这两条验证规则</p></li></ol><pre class=" language-js"><code class="language-js"> newPwd<span class="token punctuation">:</span> joi<span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span>joi<span class="token punctuation">.</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'oldPwd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span></code></pre><p> 对密码进行 bcrypt 加密处理 </p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Pwd <span class="token operator">=</span> bcrypt<span class="token punctuation">.</span><span class="token function">hashSync</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>Pwd<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>Token加密后，数据库密码与用户输入的比较</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在头部区域导入 bcryptjs 后， </span><span class="token comment" spellcheck="true">// 即可使用 bcrypt.compareSync(提交的密码，数据库中的密码) 方法验证密码是否正确 </span><span class="token comment" spellcheck="true">// compareSync() 函数的返回值为布尔值，true 表示密码正确，false 表示密码错误 </span><span class="token keyword">const</span> bcrypt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bcryptjs'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 判断提交的旧密码是否正确 </span><span class="token keyword">const</span> compareResult <span class="token operator">=</span> bcrypt<span class="token punctuation">.</span><span class="token function">compareSync</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>oldPwd<span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>compareResult<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token string">'原密码错误！'</span><span class="token punctuation">)</span></code></pre><p>推荐使用 multer 来解析 multipart&#x2F;form-data 格式的表单数据。</p><ol><li>运行如下的终端命令，在项目中安装 multer  </li><li>模块中导入并配置 multer ：</li><li>修改 发布新文章 的路由如下：</li></ol><pre class=" language-js"><code class="language-js">npm i multer@<span class="token number">1.4</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token comment" spellcheck="true">// 导入解析 formdata 格式表单数据的包 </span><span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multer'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 导入处理路径的核心模块 </span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创建 multer 的实例对象，通过 dest 属性指定文件的存放路径 </span><span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">;</span> dest<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../uploads'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发布新文章的路由 </span><span class="token comment" spellcheck="true">// upload.single() 是一个局部生效的中间件，用来解析 FormData 格式的表单数据 </span><span class="token comment" spellcheck="true">// 将文件类型的数据，解析并挂载到 req.file 属性中 </span><span class="token comment" spellcheck="true">// 将文本类型的数据，解析并挂载到 req.body 属性中s</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">'cover_img'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> article_handler<span class="token punctuation">.</span>addArticle<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter</title>
      <link href="/2022/05/04/wen-zhang-shi-li/"/>
      <url>/2022/05/04/wen-zhang-shi-li/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="center">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="center">Markdown</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">data</td><td align="center">文件创建的日期</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="center">根<code>_config.yml</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="center"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="center">true</td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为<code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="center">false</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="center">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="center">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="center">true</td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启</td></tr><tr><td align="left">mathjax</td><td align="center">无</td><td align="left"><code>_config.yml</code> 文件中也需要开启</td></tr><tr><td align="left">summary</td><td align="center">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="center">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="center">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p>注意：</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供</li><li>你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><h3 id="最简单示例"><a href="#最简单示例" class="headerlink" title="最简单示例"></a>最简单示例</h3><pre class=" language-yacas"><code class="language-yacas">---title: typora-vue-theme主题介绍date: 2022-05-06 09:25:00---</code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-05-06 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 秋去冬来<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写</title>
      <link href="/2022/04/27/shou-xie/"/>
      <url>/2022/04/27/shou-xie/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//让数据变成对象的格式</span><span class="token keyword">function</span> reolveData <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> myAjax <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">reolveData</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//判断请求类型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>methods<span class="token punctuation">,</span> options<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> qs<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>methods<span class="token punctuation">,</span> options<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>qs<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>      xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readystatus <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>      option<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> deounce <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>    time <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> throttle <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span>    flag <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span>      flag <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> isObj <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">"Object"</span> <span class="token operator">&amp;&amp;</span> val <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token comment" spellcheck="true">//方法一：</span><span class="token keyword">function</span> deepClone <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> newObj <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> item <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">isObj</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">:</span> item  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> newObj<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法二</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> obj1<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">let</span> obj2<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>    <span class="token keyword">return</span> obj2<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="intanceof"><a href="#intanceof" class="headerlink" title="intanceof"></a>intanceof</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> myInstanceof <span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token keyword">let</span> leftPro <span class="token operator">=</span> left<span class="token punctuation">.</span>__proto__<span class="token punctuation">,</span> rightPro <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftPro <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftPro <span class="token operator">===</span> rightPro<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>    leftPro <span class="token operator">=</span> leftPro<span class="token punctuation">.</span>__proto__  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myCall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 判断调用者是否为函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'type erroe'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 不传参默认为window</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window <span class="token comment" spellcheck="true">// 使用Symbol 来确定唯一</span>  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 模拟对象的this指向</span>  context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment" spellcheck="true">// 获取参数</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 绑定并执行参数</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 删除定义的this</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myApply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">const</span> arge <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>arge<span class="token punctuation">)</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myBind <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window  <span class="token comment" spellcheck="true">// 模拟this的指向</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment" spellcheck="true">// 获取参数</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 最后返回一个函数，并绑定this要考虑到使用new去调用，并且bind是可以传参的</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> Fn <span class="token punctuation">(</span><span class="token operator">...</span>newFnArges<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">self</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>newFnArgs<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>newFnArge<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> myNew <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token operator">...</span>arges<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>      <span class="token keyword">let</span> res <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> <span class="token operator">...</span>arges<span class="token punctuation">)</span>      <span class="token keyword">return</span> res <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> res <span class="token punctuation">:</span> newObj    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//call实现继承</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> ListNode <span class="token punctuation">(</span>val<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> val<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> next<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> TreeNode <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val   <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><h4 id="使用Set"><a href="#使用Set" class="headerlink" title="使用Set"></a>使用Set</h4><p>不考虑兼容性，这种去重的方法代码最少。</p><p>这种方法还无法去掉“{}”空对象，后面的高阶方法会添加去掉重复“{}”的方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="使用双重for循环，然后splice去重"><a href="#使用双重for循环，然后splice去重" class="headerlink" title="使用双重for循环，然后splice去重"></a>使用双重for循环，然后splice去重</h4><p>双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。</p><p>NaN和{}没有去重，两个null直接消失了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//第一个等同于第二个，splice方法删除第二个</span>                 arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="利用indexOf去重"><a href="#利用indexOf去重" class="headerlink" title="利用indexOf去重"></a>利用indexOf去重</h4><p>新建一个空的结果数组，for 循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则push进数组。</p><p>NaN、{}没有去重</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type error!'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>            array <span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="利用includes"><a href="#利用includes" class="headerlink" title="利用includes"></a>利用includes</h4><p>和上面indexOf思想类似</p><p>{}没有去重</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type error!'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> array <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>array<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//includes 检测数组是否有某个值</span>                    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> array<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>####利用hasOwnProperty</p><p>所有的都去重了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="数据的交并集"><a href="#数据的交并集" class="headerlink" title="数据的交并集"></a>数据的交并集</h3><p>直接使用 filter、concat 来计算</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//交集</span><span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//差集</span><span class="token keyword">var</span> d <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//补集</span><span class="token keyword">var</span> e <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//并集</span><span class="token keyword">var</span> f <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>ES6</strong> 中可以借助扩展运算符（**…**）以及 <strong>Set</strong> 的特性实现相关计算，代码也会更加简单些。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数组a："</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数组b："</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 交集</span><span class="token keyword">let</span> intersect <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> sb<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 差集</span><span class="token keyword">let</span> minus <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>sb<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 补集</span><span class="token keyword">let</span> complement  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>sb<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>sa<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 并集</span><span class="token keyword">let</span> unionSet <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//实现订阅</span>  <span class="token function">on</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//删除订阅</span>  <span class="token function">off</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">!==</span> callback<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只执行一次订阅事件</span>  <span class="token function">once</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>fn<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//触发事件</span>  <span class="token function">emit</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>events<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=</span><span class="token operator">></span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> rest<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用如下</span><span class="token comment" spellcheck="true">// const event = new EventEmitter();</span><span class="token comment" spellcheck="true">// const handle = (...rest) => {;</span><span class="token comment" spellcheck="true">//   console.log(rest);</span><span class="token comment" spellcheck="true">// };;</span><span class="token comment" spellcheck="true">// event.on("click", handle);</span><span class="token comment" spellcheck="true">// event.emit("click", 1, 2, 3, 4);</span><span class="token comment" spellcheck="true">// event.off("click", handle);</span><span class="token comment" spellcheck="true">// event.emit("click", 1, 2);</span><span class="token comment" spellcheck="true">// event.once("dbClick", () => {;</span><span class="token comment" spellcheck="true">//   console.log(123456);</span><span class="token comment" spellcheck="true">// };);</span><span class="token comment" spellcheck="true">// event.emit("dbClick");</span><span class="token comment" spellcheck="true">// event.emit("dbClick");</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 手写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 手写 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
